<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【UVM学习笔记】UVM中的“类”</title>
    <url>/2025/04/16/7fdd63537fc6/</url>
    <content><![CDATA[


一、UVM派生结构在上一篇博客讲述了UVM的结构，大家可以发现所有的结构分为两大类，一个是uvm_component，另一个是uvm_object。uvm_object是UVM中最基本的类,读者能想到的几乎所有的类都继承自uvm_object，包括uvm_component。uvm_component有两大特性是uvm_object所没有的，一是通过在new的时候指定parent参数来形成一种树形的组织结构，二是有phase的自动执行特点。下面是整个UVM类的派生图：




1.1 来自uvm_object的类既然uvm_object是最基本的类,那么其能力恰恰也是最差的,当然了,其扩展性也是最好的。下面这几个是派生与其的类：

uvm_sequence_item：之前定义的所有的transaction要从uvm_sequence_item派生。在UVM中，不能从uvm_transaction派生一个transaction，而要从uvm_sequence_item派生。因为uvm_sequence_item是从uvm_transaction派生而来的，因此uvm_sequence_item相比uvm_transaction添加了很多实用的成员变量和函数&#x2F;任务。
uvm_sequence：所有的sequence要从uvm_sequence派生。sequence就是sequence_item的组合。
config：所有的config一般直接从uvm_object派生。config的主要功能就是规范验证平台的行为方式。如规定driver在读取总线时  地址信号要持续几个时钟,片选信号从什么时候开始有效等。但是不要和前面的uvm_config_db搞混了

除了这些，还有一些没有见过的：

uvm_reg_item派生自uvm_sequence_item,用于register model中。
uvm_reg_map、uvm_mem、uvm_reg_field、uvm_reg、uvm_reg_file、uvm_reg_block等与寄存器相关的众多的类都是派生自uvm_object，它们都是用于register model。
uvm_phase派生自uvm_object，其主要作用为控制uvm_component的行为方式,使得uvm_component平滑地在各个不同的phase之间依次运转。

1.2 来自uvm_component的类这个就是上一篇博客中树的各个部分了。

uvm_driver：所有的driver都要派生自uvm_driver。driver的功能主要就是向sequencer索要sequence_item，并且将sequence_item里的信息驱动到DUT的端口上。下面是其成员变量：

uvm_seq_item_pull_port #(REQ, RSP) seq_item_port; uvm_seq_item_pull_port #(REQ, RSP) seq_item_prod_if; // alias uvm_analysis_port #(RSP) rsp_port; REQ req; RSP rsp;

uvm_monitor：所有的monitor都要派生自uvm_monitor。monitor做的事情与driver相反，driver向DUT的pin上发送数据，而monitor则是从DUT的pin上接收数据，并且把接收到的数据转换成transaction级别的sequence_item，再把转换后的数据发送给scoreboard。
uvm_sequencer：所有的sequencer都要派生自uvm_sequencer。sequencer的功能就是组织管理sequence，当driver要求数据时,  它就把sequence生成的sequence_item转发给driver。
uvm_scoreboard：一般的scoreboard都要派生自uvm_scoreboard。scoreboard的功能就是比较reference model和monitor分别发送来的数据,根据比较结果判断DUT是否正确工作。
reference model：UVM中并没有针对reference model定义一个类。所以通常来说，reference model都是直接派生自uvm_component。reference model的作用就是模仿DUT，完成与DUT相同的功能。
uvm_agent：所有的agent要派生自uvm_agent。与前面几个比起来，uvm_agent的作用并不是那么明显。它只是把driver和monitor封装在一起，根据参数值来决定是只实例化monitor还是要同时实例化driver和monitor。
uvm_env：所有的env(environment的缩写)要派生自uvm_env。env将验证平台上用到的固定不变的component都封装在一起。
uvm_test：所有的测试用例要派生自uvm_test或其派生类，不同的测试用例之间差异很大，所以从uvm_test派生出来的类各不相同。

二、UVM中打印信息的控制2.1 冗余度UVM通过冗余度级别的设置提高了仿真日志的可读性。在打印信息之前，UVM会比较要显示信息的冗余度级别与默认的冗余度阈值，如果小于等于阈值，就会显示，否则不会显示。默认的冗余度阈值是UVM_MEDIUM，所有低于等于UVM_MEDIUM(如UVM_LOW)的信息都会被打印出来。
2.2 重载重载是深入到UVM骨子里的一个特性。UVM默认有四种信息严重性:UVM_INFO、UVM_WARNING、UVM_ERROR、  UVM_FATAL。这四种严重性可以互相重载。
2.3 UVM_ERROR到达一定数量结束仿真当uvm_fatal出现时,表示出现了致命错误,仿真会马上停止。UVM同样支持UVM_ERROR达到一定数量时结束仿真。这个功能非常有用。实现这个功能的是set_report_max_quit_count函数：
function void base_test::build_phase(uvm_phase phase);   super.build_phase(phase);   env  =  my_env::type_id::create(&quot;env&quot;, this);    set_report_max_quit_count(5);endfunction
2.4 UVM的断点功能在程序调试时，断点功能是非常有用的一个功能。在程序运行时，预先在某语句处设置一断点。当程序执行到此处时，停止仿真，进入交互模式，从而进行调试。断点功能需要从仿真器的角度进行设置，不同仿真器的设置方式不同。为了消除这些设置方式的不同，UVM支持内建的断点功能，当执行到断点时，自动停止仿真，进入交互模式：
env.i_agt.drv.set_report_severity_action(UVM_WARNING, UVM_DISPLAY| UVM_STOP);
2.5 将输出信息导入文件中UVM会将UVM_INFO等信息显示在标准输出(终端屏幕)上。各个仿真器提供将显示在标准输出的信息同时输出到一个日志文件中的功能。
virtual function void connect_phase(uvm_phase phase);    driver_log = $fopen(&quot;driver.log&quot;, &quot;w&quot;);    drv_log = $fopen(&quot;drv.log&quot;, &quot;w&quot;);    env.i_agt.drv.set_report_severity_id_file(UVM_WARNING, &quot;my_driver&quot;, driver_log);    env.i_agt.drv.set_report_severity_id_file(UVM_INFO, &quot;my_drv&quot;, drv_log);    env.i_agt.drv.set_report_id_action(&quot;my_driver&quot;, UVM_DISPLAY| UVM_LOG);    env.i_agt.drv.set_report_id_action(&quot;my_drv&quot;, UVM_DISPLAY| UVM_LOG);endfunction
上述代码将env.i_agt.drv的UVM_INFO输出到info.log，UVM_WARNING输出到warning.log，UVM_ERROR输出到error.log，  UVM_FATAL输出到fatal.log。
2.5 控制打印信息的行为有很多宏定义：
typedef enum &#123;  	 UVM_NO_ACTION = &#x27;b000000,	 UVM_DISPLAY = &#x27;b000001, 	 UVM_LOG = &#x27;b000010, 	 UVM_COUNT = &#x27;b000100, 	 UVM_EXIT = &#x27;b001000, 	 UVM_CALL_HOOK = &#x27;b010000, 	 UVM_STOP = &#x27;b100000  &#125; uvm_action_type;
其中UVM_NO_ACTION是不做任何操作;UVM_DISPLAY是输出到标准输出上;UVM_LOG是输出到日志文件中,它能工作  的前提是设置好了日志文件;UVM_COUNT是作为计数目标;UVM_EXIT是直接退出仿真;UVM_CALL_HOOK是调用一个回调  函数;UVM_STOP是停止仿真,进入命令行交互模式。
三、config_db机制路径和层次结构是两个不同的概念，如果你使用了下面的代码：
drv = my_driver::type_id::create(&quot;driver&quot;);
这样的话，那么drv在my_casen看来，层次结构依然是env.i_agt.drv，但其路径变为了env.i_agt.driver。在好的编码习惯中，这种变量名与 其实例化时传递的名字不一致的情况应该尽量避免。
3.1 set与get函数的参数config_db机制用于在UVM验证平台间传递参数。set函数是寄信，而get函数是收信。代码如下：
uvm_config_db#(int)::set(this, &quot;env.i_agt.drv&quot;, &quot;pre_num&quot;, 100);
其中第一个和第二个参数联合起来组成目标路径，与此路径符合的目标才能收信。第一个参数必须是一个uvm_component实例的指针，第二个参数是相对此实例的路径。第三个参数表示一个记号，用以说明这个值是传给目标中的哪个成员的，第四个参数是要设置的值。在driver中的build_phase使用如下方式收信：
uvm_config_db#(int)::get(this, &quot;&quot;, &quot;pre_num&quot;, pre_num);
get函数中的第一个参数和第二个参数联合起来组成路径。
3.2 跨层次的多重设置假如uvm_test_top和env中都对driver的pre_num的值进行了设置，获得的数值还是uvm_test_top，UVM规定层次越高,那么它的优先级越高。这里的层次指的是在UVM  树中的位置,越靠近根结点uvm_top,则认为其层次越高。当跨层次来看待问题时，是高层次的set设置优先；当处于同一层次时，上节已经提过，是时间优先。
3.3 非直线的设置与获取若在其他component，如scoreboard中，对driver的某些变量使用config_db机制进行设置,则称为非直线的设置，我们应该尽量避免这种方式。
总结本次描述了在上一节定义的众多组件的详细介绍，能够让我们更加深刻的了解UVM各组件之间的协调运转。
]]></content>
      <categories>
        <category>UVM学习笔记</category>
      </categories>
      <tags>
        <tag>UVM</tag>
      </tags>
  </entry>
  <entry>
    <title>【UVM学习笔记】UVM基础—一文告诉你UVM的组成部分</title>
    <url>/2025/04/16/675312ec1441/</url>
    <content><![CDATA[


一、Driver驱动器这段代码是用 SystemVerilog 编写的一个基于 UVM（Universal Verification Methodology）的驱动器（driver）组件，名为 my_driver。它继承自 uvm_driver 类，用于在验证环境中驱动 DUT（Design Under Test，被测设计）的输入信号。下面我将逐步解释这段代码的结构和功能。
1.1 整体结构代码分为两个主要部分：

类定义部分：定义了 my_driver 类，包括构造函数和一个外部声明的任务（main_phase）。
任务实现部分：实现了 main_phase 任务，负责具体的信号驱动逻辑。

此外，代码使用 ifndef 和 define 宏来防止重复包含。
1.2 详细解释1.2.1 宏定义保护ifndef MY_DRIVER__SVdefine MY_DRIVER__SV
检查是否已经定义了宏MY_DRIVER__SV。如果没有定义，则编译器会继续处理后面的代码。最后，文件末尾的 endif 与开头的 ifndef 配对，结束条件编译块。
1.2.2 类定义class my_driver extends uvm_driver;   function new(string name = &quot;my_driver&quot;, uvm_component parent = null);      super.new(name, parent);   endfunction   extern virtual task main_phase(uvm_phase phase);endclass
class my_driver extends uvm_driver：定义一个名为 my_driver 的类，并且表示 my_driver 继承自 UVM 提供的基类 uvm_driver。uvm_driver 是 UVM 框架中的一个标准组件类，用于将事务级数据转换为 DUT 的引脚级信号。

事务级数据是指更高层次的抽象数据，通常以结构体或类的形式表示，而不是直接的硬件信号（0 和 1）。它描述的是“做什么”，而不是“怎么做”。假设事务是一个 8 位数据 8’b10100101。驱动器将其转换为：top_tb.rxd &lt;&#x3D; 8’b10100101;（数据信号）top_tb.rx_dv &lt;&#x3D; 1’b1;（有效信号）并在 @(posedge top_tb.clk) 时更新这些信号。

function new：定义类的构造函数，用于创建 my_driver 对象。super.new(name, parent)：调用父类 uvm_driver 的构造函数，将 name 和 parent 参数传递给它。这是 UVM 中面向对象编程的标准做法，确保父类的初始化逻辑被执行。extern：表示 main_phase 任务的实现不在类定义内部，而是在外部单独定义。virtual：声明这是一个虚任务，允许子类重写（override）它。这是 UVM 中 phase 方法的常见做法。task main_phase(uvm_phase phase)：定义一个名为 main_phase 的任务，接收一个 uvm_phase 类型的参数 phase，表示 UVM 的仿真阶段（这里是 main_phase，通常用于主要的测试执行阶段）。
1.2.3 任务实现task my_driver::main_phase(uvm_phase phase);   top_tb.rxd &lt;= 8&#x27;b0;   top_tb.rx_dv &lt;= 1&#x27;b0;   while(!top_tb.rst_n)      @(posedge top_tb.clk);   for(int i = 0; i &lt; 256; i++)begin      @(posedge top_tb.clk);      top_tb.rxd &lt;= $urandom_range(0, 255);      top_tb.rx_dv &lt;= 1&#x27;b1;      `uvm_info(&quot;my_driver&quot;, &quot;data is drived&quot;, UVM_LOW)   end   @(posedge top_tb.clk);   top_tb.rx_dv &lt;= 1&#x27;b0;endtask
my_driver::main_phase：明确指定这个任务是 my_driver 类的一部分。这是 main_phase 的具体实现，负责驱动 DUT 的信号。uvm_info(“my_driver”, “data is drived”, UVM_LOW)：UVM 提供的日志记录宏，打印信息。my_driver：消息来源（组件名）。data is drived：消息内容。UVM_LOW：日志级别，表示低详细程度。作用：在 256 个时钟周期内，连续向 DUT 的 rxd 输入随机数据，并将 rx_dv 置为 1，同时记录日志。

所谓类的定义,就是用编辑器写下：
&gt;class A&gt;...&gt;endclass
而所谓类的实例化指的是通过new创造出A的一个实例:
&gt;A a_list;&gt;a_list = new();
1.2.4 factory机制factory机制的实现被集成在了一个宏中：uvm_component_utils。这个宏所做的事情非常多，其中之一就是将my_driver登记在UVM内部的一张表中，这张表是 factory 功能实现的基础。只要在定义一个新的类时使用这个宏，就相当于把这个类注册到了这张表中。
`uvm_component_utils(my_driver)
在给driver中加入factory机制后，还需要对top_tb做一些改动：
initial begin	run_test(&quot;my_driver&quot;);end
但是输出的结果只有两个，没有执行后面的代码，关于这个问题，牵涉UVM的objection机制。
UVM_INFO my_driver.sv(8) @ 0: uvm_test_top [my_driver] new is calledUVM_INFO @ 0: reporter [RNTST] Running test my_driver...UVM_INFO my_driver.sv(14) @ 0: uvm_test_top [my_driver] main_phase is called
1.2.4 objection机制UVM中通过objection机制来控制验证平台的关闭。细心的读者可能发现，在上节的例子中，并没有如2.2.1节所示显式地调用 finish 语句来结束仿真。但是在运行上节例子时，仿真平台确实关闭了。在每个phase中，UVM会检查是否有objection被提起  (raise_objection)，如果有，那么等待这个objection被撤销(drop_objection)后停止仿真；如果没有，则马上结束当前 phase。
task my_driver::main_phase(uvm_phase phase);   phase.raise_objection(this);	...   phase.drop_objection(this);endtask
raise_objection语句必须在main_phase中第一个消耗仿真时间的语句之前。	
1.2.5 加入virtual interface使用该方法能够杜绝因为绝对路径所带来的不便，在SystemVerilog中使用interface来连接验证平台与DUT的端口，该端口可以认为是一种总线。定义interface的方法如下：
`ifndef MY_IF__SV`define MY_IF__SVinterface my_if(input clk, input rst_n);   logic [7:0] data;   logic valid;endinterface`endif
因为my_driver是一个类，在类中不能使用声明的方法定义一个  interface，只有在类似top_tb这样的模块(module)中才可以。在类中使用的是virtual interface：
virtual my_if vif;
因此在 中就可以使用该方法来使用：
task my_driver::main_phase(uvm_phase phase);   phase.raise_objection(this);   `uvm_info(&quot;my_driver&quot;, &quot;main_phase is called&quot;, UVM_LOW);   vif.data &lt;= 8&#x27;b0;    vif.valid &lt;= 1&#x27;b0;   while(!vif.rst_n)      @(posedge vif.clk);   for(int i = 0; i &lt; 256; i++)begin      @(posedge vif.clk);      vif.data &lt;= $urandom_range(0, 255);      vif.valid &lt;= 1&#x27;b1;      `uvm_info(&quot;my_driver&quot;, &quot;data is drived&quot;, UVM_LOW);   end   @(posedge vif.clk);   vif.valid &lt;= 1&#x27;b0;   phase.drop_objection(this);endtask
下面的问题是，如何把top_tb中的input_if和my_driver中的vif对应起来。针对该问题，UVM引进了config_db机制。在config_db机制中，分为set和get两步操作。set就是读取数据，get就是输出数据。在top_tb中的代码如下所示：
initial begin   uvm_config_db#(virtual my_if)::set(null, &quot;uvm_test_top&quot;, &quot;vif&quot;, input_if);end
在my_driver中的代码如下所示：
virtual function void build_phase(uvm_phase phase);   super.build_phase(phase);   `uvm_info(&quot;my_driver&quot;, &quot;build_phase is called&quot;, UVM_LOW);   if(!uvm_config_db#(virtual my_if)::get(this, &quot;&quot;, &quot;vif&quot;, vif))      `uvm_fatal(&quot;my_driver&quot;, &quot;virtual interface must be set for vif!!!&quot;)endfunction
首先build_phase也是内置函数，build_phase在new函数之后main_phase之前执行。其中的super.build_phase语句是因为在其父类的build_phase中执行了一些必要的操作。其中还出现了uvm_fatal宏，其与uvm_info的作用类似。uvm_fatal的出现表示验证平台出现了重大问题而无法继续下去,必须停止仿真并做相应的检查。config_db的set和get函数都有四个参数，这两个函数的第三个参数必须完全一致。

set函数的第四个参数表示要将哪个interface通过config_db传递给my_driver
get函数的第四个参数表示把得到的interface传递给哪个my_driver的成员变量。

set函数的第二个参数表示的是路径索引，UVM通过run_test语句创建一个名字为uvm_test_top的实例，因此需要输入uvm_test_top。无论传递给run_test的参数是什么,创建的实例的名字都为uvm_test_top。其他两个参数以后再说。set函数与get函数使用双冒号是因为这两个函数都是静态函数，而前面的#键是要传递的类型,这里是virtual my_if。
二、transaction组件transaction就是一个提供数据传输的打包操作。在不同的验证平台中,会有不同的transaction。一个简单的transaction的定义如下:
`ifndef MY_TRANSACTION__SV`define MY_TRANSACTION__SVclass my_transaction extends uvm_sequence_item;   rand bit[47:0] dmac;   rand bit[47:0] smac;   rand bit[15:0] ether_type;   rand byte      pload[];   rand bit[31:0] crc;   constraint pload_cons&#123;      pload.size &gt;= 46;      pload.size &lt;= 1500;   &#125;   function bit[31:0] calc_crc();      return 32&#x27;h0;   endfunction   function void post_randomize();      crc = calc_crc;   endfunction   `uvm_object_utils(my_transaction)   function new(string name = &quot;my_transaction&quot;);      super.new();   endfunctionendclass`endif
其中dmac和smac模拟的就是发送地址和接受地址，ether_type是以太网类型，pload是其携带数据的大小。下面的函数是用于约束上述数据的。通过pload_cons约束将其大小被限制在46~1500byte，CRC暂且使用post_randomize中加的一个空函数calc_crc来对其定义，有兴趣的读者可以将其补充完整。

post_randomize是SystemVerilog中提供的一个函数，当某个类的实例的randomize函数被调用后,post_randomize会紧随其后无条件地被调用。

在transaction定义中，有两点值得引起注意：

my_transaction的基类是uvm_sequence_item。在UVM中,所有的transaction都要从uvm_sequence_item派生
是这里没有使用uvm_component_utils宏来实现factory机制，而是使用了uvm_object_utils。

下面便是使用transaction的my_driver代码：
task my_driver::main_phase(uvm_phase phase);   my_transaction tr;   phase.raise_objection(this);   vif.data &lt;= 8&#x27;b0;   vif.valid &lt;= 1&#x27;b0;   while(!vif.rst_n)      @(posedge vif.clk);   for(int i = 0; i &lt; 2; i++) begin       tr = new(&quot;tr&quot;);      assert(tr.randomize() with &#123;pload.size == 200;&#125;);      drive_one_pkt(tr);   end   repeat(5) @(posedge vif.clk);   phase.drop_objection(this);endtasktask my_driver::drive_one_pkt(my_transaction tr);   bit [47:0] tmp_data;   bit [7:0] data_q[$];      //push dmac to data_q   tmp_data = tr.dmac;   for(int i = 0; i &lt; 6; i++) begin      data_q.push_back(tmp_data[7:0]);      tmp_data = (tmp_data &gt;&gt; 8);   end   //push smac to data_q   //push ether_type to data_q   //push payload to data_q   //push crc to data_q   `uvm_info(&quot;my_driver&quot;, &quot;begin to drive one pkt&quot;, UVM_LOW);   repeat(3) @(posedge vif.clk);   while(data_q.size() &gt; 0) begin      @(posedge vif.clk);      vif.valid &lt;= 1&#x27;b1;      vif.data &lt;= data_q.pop_front();    end   @(posedge vif.clk);   vif.valid &lt;= 1&#x27;b0;   `uvm_info(&quot;my_driver&quot;, &quot;end drive one pkt&quot;, UVM_LOW);endtask
在main_phase中，先使用randomize将tr随机化，之后通过drive_one_pkt任务将tr的内容驱动到DUT的端口上。在drive_one_pkt中，先将tr中所有的数据压入队列data_q中，之后再将data_q中所有的数据弹出输入到DUT端口上。
三、env组件为了能够更好的实例化my_dirver等组件，需要有一个容器去把他们装在一起，这个容器就是env，代码如下：
`ifndef MY_ENV__SV`define MY_ENV__SVclass my_env extends uvm_env;   my_driver drv;   function new(string name = &quot;my_env&quot;, uvm_component parent);      super.new(name, parent);   endfunction   virtual function void build_phase(uvm_phase phase);      super.build_phase(phase);      drv = my_driver::type_id::create(&quot;drv&quot;, this);    endfunction   `uvm_component_utils(my_env)endclass`endif
在my_env的定义中，使用了区别于new的方式，只有使用这种方式实例化的实例，验证平台中的组件在实例化时都应该使用type_name::type_id::create的方式。回顾一下my_driver的new函数：
function new(string name = &quot;my_driver&quot;, uvm_component parent = null); 	super.new(name, parent); endfuncti
可以看出 my_driver 的父结点就是my_env。通过parent的形式，UVM建立起了树形的组织结构。在这种树形的组织结构中，由run_test创建的实例是树根，并且树根的名字是固定的为uvm_test_top，长出枝叶的过程需要在my_env的build_phase中手动实现。无论是树根还是树叶，都必须由 uvm_component 或者其派生类继承而来。整棵UVM树的结构如图所示。



在UVM的树形结构中，build_phase的执行遵照从树根到树叶的顺序。
在top_tb中使用config_db机制传递virtual  my_if时，要改变相应的路径；同时，run_test的参数也从my_driver变为了my_env。
initial begin   run_test(&quot;my_env&quot;);endinitial begin   uvm_config_db#(virtual my_if)::set(null, &quot;uvm_test_top.drv&quot;, &quot;vif&quot;, input_if);end
set函数的第二个参数从uvm_test_top变为了uvm_test_top.drv，其中uvm_test_top是UVM自动创建的树根的名字，而drv则是在my_env的build_phase中实例化drv时传递过去的名字。
# 四、monitor组件
验证平台中实现监测DUT行为的组件是monitor，其主要功能起到一个监测作用。其将用于收集DUT的端口数据，并将其转换成transaction交给后续的组件处理。代码如下：
`ifndef MY_MONITOR__SV`define MY_MONITOR__SVclass my_monitor extends uvm_monitor;   virtual my_if vif;   `uvm_component_utils(my_monitor)   function new(string name = &quot;my_monitor&quot;, uvm_component parent = null);      super.new(name, parent);   endfunction   virtual function void build_phase(uvm_phase phase);      super.build_phase(phase);      if(!uvm_config_db#(virtual my_if)::get(this, &quot;&quot;, &quot;vif&quot;, vif))         `uvm_fatal(&quot;my_monitor&quot;, &quot;virtual interface must be set for vif!!!&quot;)   endfunction   extern task main_phase(uvm_phase phase);   extern task collect_one_pkt(my_transaction tr);endclasstask my_monitor::main_phase(uvm_phase phase);   my_transaction tr;   while(1) begin      tr = new(&quot;tr&quot;);      collect_one_pkt(tr);   endendtasktask my_monitor::collect_one_pkt(my_transaction tr);   bit[7:0] data_q[$];    int psize;   while(1) begin      @(posedge vif.clk);      if(vif.valid) break;   end   `uvm_info(&quot;my_monitor&quot;, &quot;begin to collect one pkt&quot;, UVM_LOW);   while(vif.valid) begin      data_q.push_back(vif.data);      @(posedge vif.clk);   end   //pop dmac   //pop smac   //pop ether_type   //pop payload   //pop crc   `uvm_info(&quot;my_monitor&quot;, &quot;end collect one pkt, print it:&quot;, UVM_LOW);    tr.my_print();endtask`endif
该代码与my_driver非常相似。其主要工作与my_driver相反，my_driver用于产生驱动信号，而该模块则用于收集。
最后要在evn中进行实例化：
virtual function void build_phase(uvm_phase phase);   super.build_phase(phase);   drv = my_driver::type_id::create(&quot;drv&quot;, this);    i_mon = my_monitor::type_id::create(&quot;i_mon&quot;, this);   o_mon = my_monitor::type_id::create(&quot;o_mon&quot;, this);endfunction
需要注意的是这里定义了两个my_monitor模块，一个收集输入的，另一个收集输出的。树形结构如下所示：





五、agent组件因为my_monitor和my_dirver有相似性，因此可以将两者封装在一起，使用agent组件，代码如下：
`ifndef MY_AGENT__SV`define MY_AGENT__SVclass my_agent extends uvm_agent ;   my_driver     drv;   my_monitor    mon;      function new(string name, uvm_component parent);      super.new(name, parent);   endfunction       extern virtual function void build_phase(uvm_phase phase);   extern virtual function void connect_phase(uvm_phase phase);   `uvm_component_utils(my_agent)endclass function void my_agent::build_phase(uvm_phase phase);   super.build_phase(phase);   if (is_active == UVM_ACTIVE) begin       drv = my_driver::type_id::create(&quot;drv&quot;, this);   end   mon = my_monitor::type_id::create(&quot;mon&quot;, this);endfunction function void my_agent::connect_phase(uvm_phase phase);   super.connect_phase(phase);endfunction`endif

这里有一点比较疑惑，为什么build_phase和connect_phase要在外面定义？为什么不在里面？

里面的is_active相当于一个宏定义，用于判断是否实例化dirver，比如再输入的时候需要实例化去驱动，但是在输出就不需要。因此，env的代码就变成下面的样子：
virtual function void build_phase(uvm_phase phase);   super.build_phase(phase);   i_agt = my_agent::type_id::create(&quot;i_agt&quot;, this);   o_agt = my_agent::type_id::create(&quot;o_agt&quot;, this);   i_agt.is_active = UVM_ACTIVE;   o_agt.is_active = UVM_PASSIVE;endfunction
UVM_ACTIVE和UVM_PASSIVE是两个枚举。UVM树形结构变成下面这样：




五、reference model组件reference model用于完成和DUT相同的功能，用于与设计的验证平台在后面的计分板上做对比。改模块的代码如下所示：
`ifndef MY_MODEL__SV`define MY_MODEL__SVclass my_model extends uvm_component;      uvm_blocking_get_port #(my_transaction)  port;   uvm_analysis_port #(my_transaction)  ap;   extern function new(string name, uvm_component parent);   extern function void build_phase(uvm_phase phase);   extern virtual  task main_phase(uvm_phase phase);   `uvm_component_utils(my_model)endclass function my_model::new(string name, uvm_component parent);   super.new(name, parent);endfunction function void my_model::build_phase(uvm_phase phase);   super.build_phase(phase);   port = new(&quot;port&quot;, this);   ap = new(&quot;ap&quot;, this);endfunctiontask my_model::main_phase(uvm_phase phase);   my_transaction tr;   my_transaction new_tr;   super.main_phase(phase);   while(1) begin      port.get(tr);      new_tr = new(&quot;new_tr&quot;);      new_tr.my_copy(tr);      `uvm_info(&quot;my_model&quot;, &quot;get one transaction, copy and print it:&quot;, UVM_LOW)      new_tr.my_print();      ap.write(new_tr);   endendtask`endif
可以看出，其主要就是复制了一份tr从ap到port。但是其中的难点在于如何将 my_model 与其他模块进行通信。在UVM中,通常使用TLM(Transaction Level Modeling)实现component之间transaction级别  的通信。得到的UVM树形图如下所示：




这里需要注意数据流动的方向，是从i_agt流动到mdl，而数据是i_agt中的my_monitor。因此在 my_monitor 需要定义一下：
uvm_analysis_port #(my_transaction)  ap;   virtual function void build_phase(uvm_phase phase);...      ap = new(&quot;ap&quot;, this);   endfunction   task my_monitor::main_phase(uvm_phase phase);   my_transaction tr;   while(1) begin      tr = new(&quot;tr&quot;);      collect_one_pkt(tr);      ap.write(tr);   endendtask
uvm_analysis_port是一个参数化的类，其参数就是这个analysis_port需要传递的数据的类型,在本节中是my_transaction。到此,在my_monitor中需要为transaction通信准备的工作已经全部完成。UVM的transaction级别通信的数据接收方式也有多种,其中一种就是使用uvm_blocking_get_port。该接收端已经在 my_monitor 中定义好了。可以往前去看my_monitor的代码。在 my_monitor 和 my_model 中定义并实现了各自的端口之后，通信的功能并没有实现,还需要在 my_env 中使用 fifo 将两个端口联系在一起。下面是my_env 中的代码：
class my_env extends uvm_env;   uvm_tlm_analysis_fifo #(my_transaction) agt_mdl_fifo;...   virtual function void build_phase(uvm_phase phase);   ...      agt_mdl_fifo = new(&quot;agt_mdl_fifo&quot;, this);   endfunction...endclassfunction void my_env::connect_phase(uvm_phase phase);   super.connect_phase(phase);   i_agt.ap.connect(agt_mdl_fifo.analysis_export);   mdl.port.connect(agt_mdl_fifo.blocking_get_export);endfunction`endif```javafifo的类型是uvm_tlm_analysis_fifo，其参数是存储在其中的transaction的类型。&gt;这里引入了connect_phase。它的执行顺序并不是从树根到树叶,而是从树叶到树根——先执行driver和  monitor的connect_phase,再执行agent的connect_phase,最后执行env的connect_phase。但是该连接是与i_agt进行连接，怎么打通i_agt与my_monitor之间的通道呢？就是使用指针的方式。i_agt中的代码如下：```javauvm_analysis_port #(my_transaction)  ap;function void my_agent::connect_phase(uvm_phase phase);   super.connect_phase(phase);   ap = mon.ap;endfunction
在这个代码里面没有实例化，直接将mon中的ap传给i_agt中的ap，就是用指针的形式，在访问i_agt中的ap时等价于访问mon中的ap。
六、scoreboard组件该模块的作用就是比较DUT以及镜像模块的输出数值。代码如下：
`ifndef MY_SCOREBOARD__SV`define MY_SCOREBOARD__SVclass my_scoreboard extends uvm_scoreboard;   my_transaction  expect_queue[$];   uvm_blocking_get_port #(my_transaction)  exp_port;   uvm_blocking_get_port #(my_transaction)  act_port;   `uvm_component_utils(my_scoreboard)   extern function new(string name, uvm_component parent = null);   extern virtual function void build_phase(uvm_phase phase);   extern virtual task main_phase(uvm_phase phase);endclass function my_scoreboard::new(string name, uvm_component parent = null);   super.new(name, parent);endfunction function void my_scoreboard::build_phase(uvm_phase phase);   super.build_phase(phase);   exp_port = new(&quot;exp_port&quot;, this);   act_port = new(&quot;act_port&quot;, this);endfunction task my_scoreboard::main_phase(uvm_phase phase);   my_transaction  get_expect,  get_actual, tmp_tran;   bit result;    super.main_phase(phase);   fork       while (1) begin         exp_port.get(get_expect);         expect_queue.push_back(get_expect);      end      while (1) begin         act_port.get(get_actual);         if(expect_queue.size() &gt; 0) begin            tmp_tran = expect_queue.pop_front();            result = get_actual.my_compare(tmp_tran);            if(result) begin                `uvm_info(&quot;my_scoreboard&quot;, &quot;Compare SUCCESSFULLY&quot;, UVM_LOW);            end            else begin               `uvm_error(&quot;my_scoreboard&quot;, &quot;Compare FAILED&quot;);               $display(&quot;the expect pkt is&quot;);               tmp_tran.my_print();               $display(&quot;the actual pkt is&quot;);               get_actual.my_print();            end         end         else begin            `uvm_error(&quot;my_scoreboard&quot;, &quot;Received from DUT, while Expect Queue is empty&quot;);            $display(&quot;the unexpected pkt is&quot;);            get_actual.my_print();         end       end   joinendtask`endif
my_scoreboard需要比较两种数据，前者通过exp_port获取，而后者通过  act_port获取。在main_phase中通过fork建立起了两个进程：

一个进程处理exp_port的数据，当收到数据后，把数据放入expect_queue中。
另外一个进程处理act_port的数据，这是DUT的输出数据，当收集到这些数据后，将参考数据从队列里面弹出，并调用my_transaction的my_compare函数。

最终的UVM树形图如下所示：




my_transaction的my_compare函数很简单，代码如下所示：
function bit my_compare(my_transaction tr);   bit result;      if(tr == null)      `uvm_fatal(&quot;my_transaction&quot;, &quot;tr is null!!!!&quot;)   result = ((dmac == tr.dmac) &amp;&amp;             (smac == tr.smac) &amp;&amp;             (ether_type == tr.ether_type) &amp;&amp;             (crc == tr.crc));   if(pload.size() != tr.pload.size())      result = 0;   else       for(int i = 0; i &lt; pload.size(); i++) begin         if(pload[i] != tr.pload[i])            result = 0;      end   return result; endfunction
还有两个端口与外界的连接，在书里表示不在过多赘述，这里我简单说一下：首先有两个连接，一个是o_agt的数据，还有一个是my_model中的镜像数据，两者的输入接口都使用uvm_analysis_port #(my_transaction)  ap;来定义。因此在本组件中uvm_blocking_get_port定义接受，连接代码如下：
   uvm_tlm_analysis_fifo #(my_transaction) agt_scb_fifo;   uvm_tlm_analysis_fifo #(my_transaction) agt_mdl_fifo;   uvm_tlm_analysis_fifo #(my_transaction) mdl_scb_fifo;function void my_env::connect_phase(uvm_phase phase);   super.connect_phase(phase);   i_agt.ap.connect(agt_mdl_fifo.analysis_export);   mdl.port.connect(agt_mdl_fifo.blocking_get_export);   mdl.ap.connect(mdl_scb_fifo.analysis_export);   scb.exp_port.connect(mdl_scb_fifo.blocking_get_export);   o_agt.ap.connect(agt_scb_fifo.analysis_export);   scb.act_port.connect(agt_scb_fifo.blocking_get_export); endfunction
七、field_automation机制在my_transaction有三个函数，分别为my_print、my_copy以及my_compare函数。使用UVM中的field_automation机制可以将以上三个函数进行整合，该机制使用uvm_field系列宏实现：
`uvm_object_utils_begin(my_transaction)   `uvm_field_int(dmac, UVM_ALL_ON)   `uvm_field_int(smac, UVM_ALL_ON)   `uvm_field_int(ether_type, UVM_ALL_ON)   `uvm_field_array_int(pload, UVM_ALL_ON)   `uvm_field_int(crc, UVM_ALL_ON)`uvm_object_utils_end
这里使用uvm_object_utils_begin和uvm_object_utils_end来实现my_transaction的factory注册，在这两个宏中间，使用uvm_field宏注册所有字段。通过这样的操作可以直接调用copy、compare、print等函数，而无需自己定义。引入field_automation机制的另外一大好处是简化driver和monitor。my_driver的drv_one_pkt任务和  my_monitor的collect_one_pkt任务代码很长，其作用主要是将数据通过tran连接到DUT上。使用field_automation机制后，drv_one_pkt任务可以简化为:
task my_driver::drive_one_pkt(my_transaction tr);   byte unsigned     data_q[];   int  data_size;      data_size = tr.pack_bytes(data_q) / 8;    `uvm_info(&quot;my_driver&quot;, &quot;begin to drive one pkt&quot;, UVM_LOW);   repeat(3) @(posedge vif.clk);   for ( int i = 0; i &lt; data_size; i++ ) begin      @(posedge vif.clk);      vif.valid &lt;= 1&#x27;b1;      vif.data &lt;= data_q[i];    end   @(posedge vif.clk);   vif.valid &lt;= 1&#x27;b0;   `uvm_info(&quot;my_driver&quot;, &quot;end drive one pkt&quot;, UVM_LOW);endtask
其中调用pack_bytes将tr中所有的字段变成byte流放入data_q中，减少了代码量。同理，在monitor中的解析也是这样：
task my_monitor::collect_one_pkt(my_transaction tr);   byte unsigned data_q[$];   byte unsigned data_array[];   logic [7:0] data;   logic valid = 0;   int data_size;      while(1) begin      @(posedge vif.clk);      if(vif.valid) break;   end      `uvm_info(&quot;my_monitor&quot;, &quot;begin to collect one pkt&quot;, UVM_LOW);   while(vif.valid) begin      data_q.push_back(vif.data);      @(posedge vif.clk);   end   data_size  = data_q.size();      data_array = new[data_size];   for ( int i = 0; i &lt; data_size; i++ ) begin      data_array[i] = data_q[i];    end   tr.pload = new[data_size - 18]; //da sa, e_type, crc   data_size = tr.unpack_bytes(data_array) / 8;    `uvm_info(&quot;my_monitor&quot;, &quot;end collect one pkt&quot;, UVM_LOW);endtask
这里使用unpack_bytes函数将data_q中的byte流转换成tr中的各个字段。但是这里值得注意的是，unpack_bytes函数的输入参数必须是一个动态数组，所以需要先把收集到的数据放在data_q中的数据复制到一个动态数组中。&#x3D;&#x3D;由于tr中的pload是一个动态数组,所以需要在调用 unpack_bytes 之前指定其大小,这样unpack_bytes函数才能正常工作（这里看不太懂）&#x3D;&#x3D;。
七、sequence组件sequence实际上就是一个产生激励的工具，在之前激励都是由my_dirver产生的，这次变为了sequence。在  一个规范化的UVM验证平台中,driver只负责驱动transaction,而不负责产生transaction。sequence机制有两大组成部分,一是  sequence,二是sequencer。
7.1 sequencer下面是sequencer的代码部分：
class my_sequencer extends uvm_sequencer #(my_transaction);      function new(string name, uvm_component parent);      super.new(name, parent);   endfunction       `uvm_component_utils(my_sequencer)endclass
可以看到，uvm_sequencer是一个参数化的类,其参数是my_transaction，即此sequencer产生的transaction的类型。但是，我们上文中的dirver其实也是参数化的类，应该在定义driver时指明此driver要驱动的transaction的类型:
class my_driver extends uvm_driver#(my_transaction);
这样定义的好处是可以直接使用uvm_driver中的某些预先定义好的成员变量，如uvm_driver中有成员变量req，它的类型就是传递给uvm_driver的参数，在这里就是my_transaction，可以直接使用req：
task my_driver::main_phase(uvm_phase phase);   phase.raise_objection(this);   vif.data &lt;= 8&#x27;b0;   vif.valid &lt;= 1&#x27;b0;   while(!vif.rst_n)      @(posedge vif.clk);   for(int i = 0; i &lt; 2; i++) begin       req = new(&quot;req&quot;);      assert(req.randomize() with &#123;pload.size == 200;&#125;);      drive_one_pkt(req);   end   repeat(5) @(posedge vif.clk);   phase.drop_objection(this);endtask
然后将该模块加入agent，得到的图如下所示：




7.2 sequence机制下面是前面提到的整个UVM的结构图，可以看见sequence的位置在比较偏的地方。这说明sequence并不是一个company而是一个object。




其代码如下：
class my_sequence extends uvm_sequence #(my_transaction);   my_transaction m_trans;   function new(string name= &quot;my_sequence&quot;);      super.new(name);   endfunction   virtual task body();      repeat (10) begin         `uvm_do(m_trans)      end      #1000;   endtask   `uvm_object_utils(my_sequence)endclass
可以看出，该模块在定义时同样要指定产生的transaction的类型，这里是my_transaction。每一个sequence都有一个body任务，当一个sequence启动之后，会自动执行body中的代码。在上面的例子中，用到了uvm_do，其作用为：

创建一个my_transaction的实例m_trans
将其随机化
最终将其送给sequencer

下一步就是要将uvm_driver和uvm_sequencer以及uvm_sequencer和uvm_sequencer连接起来。在uvm_driver中有成员变量seq_item_port，而在uvm_sequencer中有成员变量seq_item_export，这两者之间可以建立一个“通道”，通道中传递的transaction类型就是定义my_sequencer和my_driver时指定的transaction类型。因此在my_agent中,  使用connect函数把两者联系在一起：
function void my_agent::connect_phase(uvm_phase phase);   super.connect_phase(phase);   if (is_active == UVM_ACTIVE) begin      drv.seq_item_port.connect(sqr.seq_item_export);   end   ap = mon.ap;endfunction
链接之后，dirver就可以向sequencer申请。代码如下：
task my_driver::main_phase(uvm_phase phase);   vif.data &lt;= 8&#x27;b0;   vif.valid &lt;= 1&#x27;b0;   while(!vif.rst_n)      @(posedge vif.clk);   while(1) begin      seq_item_port.get_next_item(req);      drive_one_pkt(req);      seq_item_port.item_done();   endendtask
在如上的代码中，通过get_next_item任务来得到一个新的req,并且驱动它,驱动完成后调用item_done通知sequencer。这里为什么会有一个item_done呢，其主要作用就是让sequencer知道dirver已经接收到了这个req，形成一个类似于握手的机制。uvm_do宏产生了一个transaction并交给sequencer，driver取走这个transaction后，uvm_do并不会立刻返回执行下一次的uvm_do宏，而是等待在那里，直到driver返回item_done信号。此时，uvm_do宏才算是执行完毕，返回后开始执行下一个uvm_do，并产生新的transaction。
然后就是最后一个问题就是将uvm_sequencer和uvm_sequencer连接起来，可以直接在UVM的根部进行定义：
task my_env::main_phase(uvm_phase phase);   my_sequence seq;   phase.raise_objection(this);   seq = my_sequence::type_id::create(&quot;seq&quot;);   seq.start(i_agt.sqr);    phase.drop_objection(this);endtask
首先创建一个my_sequence的实例seq，之后调用start任务。start任务的参数是一个sequencer指针。当然其实还有另一种方法来让dirver获得tran，就是使用try_next_item函数，上文中的get_next_item是阻塞的，而try_next_item则是非阻塞的，这样大大提高了代码的灵活性。
task my_driver::main_phase(uvm_phase phase);	 vif.data &lt;= 8&#x27;b0; 	 vif.valid &lt;= 1&#x27;b0; 	 while(!vif.rst_n) 		 @(posedge vif.clk);  	while(1)  begin  		seq_item_port.try_next_item(req); 		 if(req == null)   			@(posedge vif.clk);   		else begin  			 drive_one_pkt(req);  		 seq_item_port.item_done();  	 end    endendtask
7.3 default_sequence机制在刚才，sequence是在my_env的main_phase中手工启动的，但是在实际应用中,  使用最多的还是通过default_sequence的方式启动sequence。default_sequence的启动方式很简单，只需要在任意地方加入如下代码（以my_env举例）：
uvm_config_db#(uvm_object_wrapper)::set(this,                                        &quot;i_agt.sqr.main_phase&quot;,                                        &quot;default_sequence&quot;,                                         my_sequence::type_id::get());
该代码同样使用了uvm_config_db，但是这里是在类里面调用的，第二个参数是相对于第一个参数的相对路径，由于上述代码是在my_env中，所以第二个参数中就不需  要uvm_test_top了。在top_tb中设置virtual interface时,由于top_tb不是一个类，无法使用this指针，所以设置set的第一个参数为null，并且第二个参数使用绝对路径uvm_test_top.xxx。在第二个路径参数中，出现了main_phase。这是因为该代码是在这个位置的main_phase启动的。至于set的第三个和第四个参数，书上说记住就行。还有一个问题就是，在上一节启动sequence前后，分别提起和撤销objection,这里也需要加上这两个操作。sequencer在启动default_sequence时，会自动将自己传给sequence的starting_phase，因此可以这样写：
virtual task body();   if(starting_phase != null)       starting_phase.raise_objection(this);   repeat (10) begin      `uvm_do(m_trans)   end   #1000;   if(starting_phase != null)       starting_phase.drop_objection(this);endtask
ok，结束。
八、bast_test组件没想到吧，其实uvm的树根不是env，而是这个东西。该模块的代码如下：
class base_test extends uvm_test;   my_env         env;      function new(string name = &quot;base_test&quot;, uvm_component parent = null);      super.new(name,parent);   endfunction      extern virtual function void build_phase(uvm_phase phase);   extern virtual function void report_phase(uvm_phase phase);   `uvm_component_utils(base_test)endclassfunction void base_test::build_phase(uvm_phase phase);   super.build_phase(phase);   env  =  my_env::type_id::create(&quot;env&quot;, this);    uvm_config_db#(uvm_object_wrapper)::set(this,                                           &quot;env.i_agt.sqr.main_phase&quot;,                                           &quot;default_sequence&quot;,                                            my_sequence::type_id::get());endfunctionfunction void base_test::report_phase(uvm_phase phase);   uvm_report_server server;   int err_num;   super.report_phase(phase);   server = get_report_server();   err_num = server.get_severity_count(UVM_ERROR);   if (err_num != 0) begin      $display(&quot;TEST CASE FAILED&quot;);   end   else begin      $display(&quot;TEST CASE PASSED&quot;);   endendfunction
代码很常规，但需要注意的是，这里设置了default_sequence，其他地方就不需要再设置了。上面的代码中出现了report_phase，在report_phase中根据UVM_ERROR的数量来打印不同的信息，其在main_phase结束之后执行。除了上述操作外，还通常在base_test中做如下事情：

设置整个验证平台的超时退出时间;
通过config_db设置验证平台中某些参数的值。

最终得到的树形结构如下所示：




九、总结到现在为止，一个基本的UVM结构已经完全构建完毕了，后面我会继续为大家分享uvm的相关知识以及项目。谢谢大家支持！！！
]]></content>
      <categories>
        <category>UVM学习笔记</category>
      </categories>
      <tags>
        <tag>UVM</tag>
      </tags>
  </entry>
  <entry>
    <title>【UVM学习笔记】更加灵活的UVM—通信</title>
    <url>/2025/04/16/e224389c0e0d/</url>
    <content><![CDATA[


一、TLM是什么？TLM是Transaction Level Modeling(事务级建模)的缩写。所谓transaction level是相对DUT中各个模块之间信号线级别的通信来说的。TLM通常有三种模式：

put操作，通信的发起者A把一个transaction发送给B。在这个过程中，A称为“发起者”，而B称为“目标”。A具有的端口(用方框表示)称为PORT，而B的端口(用圆圈表示)称为EXPORT。这个过程中，数据流是从A流向B的。
get操作。在这个过程中，A依然是“发起者”，B依然是“目标”，A上的端口依然是PORT，而B上的端口依然是EXPORT。这个过程中,数据流是从B流向A的。PORT和EXPORT体现的是控制流而不是数据流。






transport操作，transport操作相当于一次put操作加一次get操作，这两次操作的“发起者”都是A，目标都是B。在这个过程中,数据流先从A流向B，再从B流向A。在现实世界中,  相当于是A向B提交了一个请求(request),而B返回给A一个应答(response)。





二、put操作2.1、建立PORT和EXPORT的连接UVM中使用connect函数来建立连接关系。如A要和B通信(A是发起者)，那么可以这么写：A.port.connect(B.export)。下面是A的代码部分：
class A extends uvm_component;   `uvm_component_utils(A)   uvm_blocking_put_port#(my_transaction) A_port;   function new(string name, uvm_component parent);      super.new(name, parent);   endfunction   extern function void build_phase(uvm_phase phase);   extern virtual  task main_phase(uvm_phase phase);endclassfunction void A::build_phase(uvm_phase phase);   super.build_phase(phase);   A_port = new(&quot;A_port&quot;, this);endfunctiontask A::main_phase(uvm_phase phase);endtask
然后得到B的代码：
class B extends uvm_component;   `uvm_component_utils(B)   uvm_blocking_put_export#(my_transaction) B_export;   function new(string name, uvm_component parent);      super.new(name, parent);   endfunction   extern function void build_phase(uvm_phase phase);   extern virtual  task main_phase(uvm_phase phase);endclassfunction void B::build_phase(uvm_phase phase);   super.build_phase(phase);   B_export = new(&quot;B_export&quot;, this);endfunctiontask B::main_phase(uvm_phase phase);endtask
然后在env将两者进行链接
class my_env extends uvm_env;   A   A_inst;   B   B_inst;         function new(string name = &quot;my_env&quot;, uvm_component parent);      super.new(name, parent);   endfunction   virtual function void build_phase(uvm_phase phase);      super.build_phase(phase);      A_inst = A::type_id::create(&quot;A_inst&quot;, this);      B_inst = B::type_id::create(&quot;B_inst&quot;, this);   endfunction   extern virtual function void connect_phase(uvm_phase phase);      `uvm_component_utils(my_env)endclassfunction void my_env::connect_phase(uvm_phase phase);   super.connect_phase(phase);   A_inst.A_port.connect(B_inst.B_export);endfunction
2.2 IMP组件除了TLM中定义的PORT与EXPORT外，UVM中加入了第三种端口：IMP，起作用相当于在EXPORT后进行接受操作。添加IMP后，A的代码变为：
task A::main_phase(uvm_phase phase);   my_transaction tr;   repeat(10) begin      #10;      tr = new(&quot;tr&quot;);      assert(tr.randomize());      A_port.put(tr);   endendtask
在B中需要改动的要多一点：
class B extends uvm_component;   `uvm_component_utils(B)   uvm_blocking_put_export#(my_transaction) B_export;   uvm_blocking_put_imp#(my_transaction, B) B_imp;   function new(string name, uvm_component parent);      super.new(name, parent);   endfunction   extern function void build_phase(uvm_phase phase);   extern function void connect_phase(uvm_phase phase);   extern function void put(my_transaction tr);   extern virtual  task main_phase(uvm_phase phase);endclassfunction void B::build_phase(uvm_phase phase);   super.build_phase(phase);   B_export = new(&quot;B_export&quot;, this);   B_imp = new(&quot;B_imp&quot;, this);endfunctionfunction void B::connect_phase(uvm_phase phase);   super.connect_phase(phase);   B_export.connect(B_imp);endfunctionfunction void B::put(my_transaction tr);   `uvm_info(&quot;B&quot;, &quot;receive a transaction&quot;, UVM_LOW)    tr.print();endfunction
在上述连接关系中，IMP是作为连接的终点。在UVM中，只有IMP才能作为连接关系的终点。如果是PORT或者EXPORT作为终点，则会报错。
三、get操作get系列端口与put系列端口在某些方面完全相反。在这种连接关系中，数据流依然是从A到B，但是A由动作发起者变成了动作接收者，而B由动作接收者变成了动作发起者。




B_port的类型为uvm_blocking_get_port,A_export的类型为uvm_blocking_get_export,A_imp的类型为uvm_blocking_get_imp。A的代码为：
class A extends uvm_component;   `uvm_component_utils(A)   uvm_blocking_get_export#(my_transaction) A_export;   uvm_blocking_get_imp#(my_transaction, A) A_imp;   my_transaction tr_q[$];   function new(string name, uvm_component parent);      super.new(name, parent);   endfunction   extern function void build_phase(uvm_phase phase);   extern function void connect_phase(uvm_phase phase);   extern virtual  task get(output my_transaction tr);   extern virtual  task main_phase(uvm_phase phase);endclassfunction void A::build_phase(uvm_phase phase);   super.build_phase(phase);   A_export = new(&quot;A_export&quot;, this);   A_imp = new(&quot;A_imp&quot;, this);endfunctionfunction void A::connect_phase(uvm_phase phase);   super.connect_phase(phase);   A_export.connect(A_imp); endfunctiontask A::get(output my_transaction tr);   while(tr_q.size() == 0) #2;   tr = tr_q.pop_front();endtasktask A::main_phase(uvm_phase phase);   my_transaction tr;   repeat(10) begin      #10;      tr = new(&quot;tr&quot;);      tr_q.push_back(tr);    endendtask
在A的get任务中，每隔2个时间单位检查tr_q中是否有数据，如果有则发送出去。当B在其main_phase调用get任务时，会最终执行A的get任务。在A的connect_phase，需要把A_export和A_imp连接起来。下面是B的部分：
class B extends uvm_component;   `uvm_component_utils(B)   uvm_blocking_get_port#(my_transaction) B_port;   function new(string name, uvm_component parent);      super.new(name, parent);   endfunction   extern function void build_phase(uvm_phase phase);   extern virtual  task main_phase(uvm_phase phase);endclassfunction void B::build_phase(uvm_phase phase);   super.build_phase(phase);   B_port = new(&quot;B_port&quot;, this);endfunctiontask B::main_phase(uvm_phase phase);   my_transaction tr;   while(1) begin      B_port.get(tr);      `uvm_info(&quot;B&quot;, &quot;get a transaction&quot;, UVM_LOW)       tr.print();   endendtask
在这些连接关系中,需要谨记的是连接的终点必须是一个IMP。
四、transport端口



A代码如下所示：
task A::main_phase(uvm_phase phase);   my_transaction tr;   my_transaction rsp;   repeat(10) begin      #10;      tr = new(&quot;tr&quot;);      assert(tr.randomize());      A_transport.transport(tr, rsp);      `uvm_info(&quot;A&quot;, &quot;received rsp&quot;, UVM_MEDIUM)      rsp.print();   endendtask
B中需要定义一个类型为uvm_blocking_transport_imp的IMP：
class B extends uvm_component;   `uvm_component_utils(B)   uvm_blocking_transport_imp#(my_transaction, my_transaction, B) B_imp;   function new(string name, uvm_component parent);      super.new(name, parent);   endfunction   extern function void build_phase(uvm_phase phase);   extern task transport(my_transaction req, output my_transaction rsp);endclassfunction void B::build_phase(uvm_phase phase);   super.build_phase(phase);   B_imp = new(&quot;B_imp&quot;, this);endfunctiontask B::transport(my_transaction req, output my_transaction rsp);   `uvm_info(&quot;B&quot;, &quot;receive a transaction&quot;, UVM_LOW)    req.print();   //do something according to req   #5;   rsp = new(&quot;rsp&quot;);endtask
env中的代码是：
function void my_env::connect_phase(uvm_phase phase);   super.connect_phase(phase);   A_inst.A_transport.connect(B_inst.B_imp);endfunction
在A中调用transport任务，并把生成的transaction作为第一个参数。B中的transaport任务接收到这笔transaction，根据这笔transaction做某些操作，并把操作的结果作为transport的第二个参数发送出去。A根据接收到的rsp来决定后面的行为。
五、nonblocking端口task A::main_phase(uvm_phase phase);   my_transaction tr;   repeat(10) begin      tr = new(&quot;tr&quot;);      assert(tr.randomize());      while(!A_port.can_put()) #10;      void&#x27;(A_port.try_put(tr));   endendtask
由于端口变为了非阻塞的，所以在送出transaction之前需要调用can_put函数来确认是否能够执行put操作。can_put最终会调用B中的can_put:
六、analysis端口UVM中还有两种特殊的端口：analysis_port和analysis_export。该端口有两点需要注意的地方：

一个analysis_port(analysis_export)可以连接多个IMP，analysis_port(analysis_export)与IMP  之间的通信是一对多的通信。analysis_port(analysis_export)更像是一个广播。
put与get系列端口都有阻塞和非阻塞的区分。但是对于analysis_port和analysis_export来说,没有阻塞和非阻塞的概念。

一个analysis_port可以和多个IMP相连接进行通信，但是IMP的类型必须是uvm_analysis_imp,否则会报错。




下面是A的代码：
class A extends uvm_component;   `uvm_component_utils(A)   uvm_analysis_port#(my_transaction) A_ap;   function new(string name, uvm_component parent);      super.new(name, parent);   endfunction   extern function void build_phase(uvm_phase phase);   extern virtual  task main_phase(uvm_phase phase);endclassfunction void A::build_phase(uvm_phase phase);   super.build_phase(phase);   A_ap = new(&quot;A_ap&quot;, this);endfunctiontask A::main_phase(uvm_phase phase);   my_transaction tr;   repeat(10) begin      #10;      tr = new(&quot;tr&quot;);      assert(tr.randomize());      A_ap.write(tr);   endendtask
A的代码很简单，只是简单地定义一个analysis_port，并在main_phase中每隔10个时间单位写入一个transaction。B的代码为：
function void B::write(my_transaction tr);   `uvm_info(&quot;B&quot;, &quot;receive a transaction&quot;, UVM_LOW)    tr.print();endfunction
在env中通过下面方式进行连接：
function void my_env::connect_phase(uvm_phase phase);   super.connect_phase(phase);   A_inst.A_ap.connect(B_inst.B_imp);   A_inst.A_ap.connect(C_inst.C_imp);endfunction
上面只是一个analysis_port与IMP相连的例子。analysis_export和IMP也可以这样相连接,只需将上面例子中的uvm_analysis_port改为uvm_analysis_export就可以。
七、monitor与scoreboard之间的通信和上一个一样，在两段分别进行定义，monitor的代码为：
task my_monitor::main_phase(uvm_phase phase);   my_transaction tr;   while(1) begin      tr = new(&quot;tr&quot;);      collect_one_pkt(tr);      ap.write(tr);   endendtask
scoreboard的代码为：
function void my_scoreboard::write_monitor(my_transaction tr);   my_transaction  tmp_tran;   bit result;   if(expect_queue.size() &gt; 0) begin      tmp_tran = expect_queue.pop_front();      result = tr.compare(tmp_tran);      if(result) begin          `uvm_info(&quot;my_scoreboard&quot;, &quot;Compare SUCCESSFULLY&quot;, UVM_LOW);      end      else begin         `uvm_error(&quot;my_scoreboard&quot;, &quot;Compare FAILED&quot;);         $display(&quot;the expect pkt is&quot;);         tmp_tran.print();         $display(&quot;the actual pkt is&quot;);         tr.print();      end   end   else begin      `uvm_error(&quot;my_scoreboard&quot;, &quot;Received from DUT, while Expect Queue is empty&quot;);      $display(&quot;the unexpected pkt is&quot;);      tr.print();   endendfunction
之后在env中可以使用connect连接。由于monitor与scoreboard在UVM树中并不是平等的兄妹关系，这里选择下面的连接方式：在agent中声明一个ap,但是不实例化它,让其指向monitor中的ap。在env中可以直接连接agent的ap到scoreboard的imp：
agent:class my_agent extends uvm_agent ; 	uvm_analysis_port #(my_transaction) ap; 	...  	function void my_agent::connect_phase(uvm_phase phase); 		ap = mon.ap; 		...  	endfunction endclass env:function void my_env::connect_phase(uvm_phase phase); 	o_agt.ap.connect(scb.scb_imp); 		...  endfunction
在上面的例子中，scoreboard只接收一路数据。但在现实情况中，scoreboard除了接收monitor的数据之外，还要接收reference model的数据。相应的scoreboard就要再添加一个  uvm_analysis_imp的IMP。此时问题就出现了，由于接收到的两路数据应该做不同的处理，所以这个新的IMP也要有一个write任务与其对应。但是write只有一个，怎么办?可以使用宏定义的方法：
`uvm_analysis_imp_decl(_monitor)`uvm_analysis_imp_decl(_model)class my_scoreboard extends uvm_scoreboard;   	my_transaction  expect_queue[$];	uvm_analysis_imp_monitor#(my_transaction, my_scoreboard) monitor_imp; 	uvm_analysis_imp_model#(my_transaction, my_scoreboard) model_imp;   `uvm_component_utils(my_scoreboard)   extern function new(string name, uvm_component parent = null);   extern virtual function void build_phase(uvm_phase phase);   extern virtual task main_phase(uvm_phase phase);endclass 
上述代码通过宏uvm_analysis_imp_decl声明了两个后缀_monitor和_model。当与monitor_imp相连接的analysis_port执行write函数时,会自动调用write_monitor函数,而与model_imp相连接的analysis_port执行write  函数时,会自动调用write_model函数。
八、使用FIFO通信使用fifo的方法能够让两个端口都能实现主动的接收，因此下面的例子便是利用FIFO来实现monitor和scoreboard的通信。FIFO的本质是一块缓存加两个IMP。在monitor与FIFO的连接关系中，monitor中依然是analysis_port，FIFO中是uvm_analysis_imp，数据流和控制流的方向相同。在scoreboard与FIFO的连接关系中，scoreboard中使用blocking_get_port端口：
class my_scoreboard extends uvm_scoreboard;   my_transaction  expect_queue[$];   uvm_blocking_get_port #(my_transaction)  exp_port[16];   uvm_blocking_get_port #(my_transaction)  act_port;   `uvm_component_utils(my_scoreboard)   extern function new(string name, uvm_component parent = null);   extern virtual function void build_phase(uvm_phase phase);   extern virtual task main_phase(uvm_phase phase);endclass 
而FIFO中使用的是一个get端口的IMP。在这种连接关系中，控制流是从scoreboard到FIFO，而数据流是从FIFO到scoreboard。




在env中连接方式如下：
function void my_env::connect_phase(uvm_phase phase);   super.connect_phase(phase);   i_agt.ap.connect(agt_mdl_fifo.analysis_export);   mdl.port.connect(agt_mdl_fifo.blocking_get_export);   for(int i = 0; i &lt; 16; i++) begin      mdl.ap[i].connect(mdl_scb_fifo[i].analysis_export);      scb.exp_port[i].connect(mdl_scb_fifo[i].blocking_get_export);   end   o_agt.ap.connect(agt_scb_fifo.analysis_export);   scb.act_port.connect(agt_scb_fifo.blocking_get_export); endfunction
FIFO中有两个IMP，但是在上面的连接关系中，FIFO中却是EXPORT，这是为什么呢？实际上，FIFO中的analysis_export和blocking_get_export虽然名字中有关键字export，但是其类型却是IMP。UVM为了掩饰IMP的存在，在它们的命名中加入了export关键字。但事实上，FIFO上的端口并不局限于上述两个，一个FIFO中有众多的端口。端口列表如下：




总结总结来说，这一章主要讲了数据在UVM中的传递方式，学习这一章可以更好的编写灵活性更高的UVM代码。
]]></content>
      <categories>
        <category>UVM学习笔记</category>
      </categories>
      <tags>
        <tag>UVM</tag>
      </tags>
  </entry>
  <entry>
    <title>【UVM学习笔记】UVM验证平台的运行—Phase以及objection</title>
    <url>/2025/04/16/130da575206a/</url>
    <content><![CDATA[


一、phase机制1.1 task phase与function phaseUVM中的phase，按照其是否消耗仿真时间的特性，可以分成两大类,一类是function phase，如build_phase、connect_phase等，这些phase都不耗费仿真时间，通过函数来实现；另外一类是task phase，如run_phase等，它们耗费仿真时间，通过任务来实现。灰色背景所示的是task phase，其他为function phase。




值得注意的是，task phase中，run_phase和pre_reset_phase等12个小的phase并行运行。后者称为动态运行的phase。分成小的phase是为了实现更加精细化的控制。reset、configure、main、shutdown四个phase是核心，这四个phase通常模拟DUT的正常工作方式，在reset_phase对DUT进行复位、初始化等操作，在configure_phase则进行DUT的配置，DUT的运行主要在main_phase完成，shutdown_phase则是做一些与DUT断电相关的操作。
1.2 代码执行顺序对于UVM树来说，共有三种顺序可以选择，一是自上而下，二是自下而上，三是随机序。最后一种方式是不受人控制的，在编程当中，这种不受控制的代码越少越好。因此可以选择的无非就是自上而下或者自下而上。除了build_phase之外，所有不耗费仿真时间的phase(即function phase)都是自下而上执行的。对于同一层次的、具有兄弟关系的component，其执行顺序是按照字典序的。
1.3 super.phase的内容对于build_phase来说，uvm_component对其做的最重要的事情就是自动获取通过config_db::set设置的参数。除build_phase外,在写其他phase时,完全可以不必加上super.xxxx_phase语句。
1.4 phase的跳转phase的跳转是比较高级的功能，假如在验证平台中监测到reset_n信号为低电平,则马上从main_phase跳转到reset_phase。driver的代码如下:
task my_driver::reset_phase(uvm_phase phase);   phase.raise_objection(this);    `uvm_info(&quot;driver&quot;, &quot;reset phase&quot;, UVM_LOW)   vif.data &lt;= 8&#x27;b0;   vif.valid &lt;= 1&#x27;b0;   while(!vif.rst_n)      @(posedge vif.clk);   phase.drop_objection(this); endtasktask my_driver::main_phase(uvm_phase phase);   `uvm_info(&quot;driver&quot;, &quot;main phase&quot;, UVM_LOW)   fork      while(1) begin         seq_item_port.get_next_item(req);         drive_one_pkt(req);         seq_item_port.item_done();      end      begin         @(negedge vif.rst_n);         phase.jump(uvm_reset_phase::get());      end   joinendtask
reset_phase主要做一些清理工作,并等待复位完成。main_phase中一旦监测到reset_n为低电平,则马上跳转到reset_phase。
二、objection机制objection字面的意思就是反对、异议。在验证平台中，可以通过drop_objection来通知系统可以关闭验证平台。当然，在撤销之前首先要raise_objection如果UVM发现此phase没有提起任何objection,那么将会直接跳转到下一个phase中。一般来说,在一个实际的验证平台中,通常会在以下两种objection的控制策略中选择一种:  
2.1 在scoreboard中进行控制如果要在scoreboard中控制objection，则需要通过config_db::set的方式设置收集到的transaction的数量pkt_num，当收集到足够数量的transaction后跳出循环：
task my_scoreboard::main_phase(uvm_phase phase); 	phase.raise_objection(this); 	fork 		while (1) begin 			exp_port.get(get_expect); 			expect_queue.push_back(get_expect); 		end 		for(int i = 0; i &lt; pkt_num; i++) begin 			act_port.get(get_actual); 			...  		end	join_any 	phase.drop_objection(this); endtask
上述代码中将原本的fork…join语句改为了fork…join_any。当收集到足够的transaction后，第二个进程终结，从而跳出fork…join_any，执行drop_objection语句。
2.1 在sequence中进行控制当sequence完成后,再撤销此objection。这里就是之前章节的例子：
task my_case0::main_phase(uvm_phase phase);   phase.raise_objection(this);   `uvm_info(&quot;case0&quot;, &quot;main_phase&quot;, UVM_LOW)   #10000;   phase.drop_objection(this);endtask
以上两种方式在验证平台中都有应用。其中用得最多的是第二种,这种方式是UVM提倡的方式。UVM的设计哲学就是全部  由sequence来控制激励的生成,因此一般情况下只在sequence中控制objection。但是有一个问题就是：在sequence中，n时刻发送完毕最后一个transaction，如果此时立刻drop_objection，那么最后在n+p时刻DUT输出的包将无法接收到。因此,在sequence中，最后一个包发送完毕后，要延时p时间才能drop_objection，对应的图如下所示：




virtual task body(); 	if(starting_phase != null) 		starting_phase.raise_objection(this); 	repeat (10) begin 		`uvm_do(m_trans) 	end 	#100; 	if(starting_phase != null) 		starting_phase.drop_objection(this); endtask
还有一种方法就是在最顶层运行下面的代码：
phase.phase_done.set_drain_time(this, 200);
这样在你撤销drop_objection后还会等待一段时间，提高了灵活性。
二、domain机制在默认情况下，验证平台中所有component都位于一个名字为common_domain的domain中，假设有两个driver，那么两者在每一个phase的运行都是同步的。若要体现出独立性,那么两个部分的reset_phase、configure_phae、main_phase等就不应该同步。此时就应该让其中的一部分从common_domain中独立出来，使其位于不同的domain中。下面是两个在不同的domain的情况：




domain把两块时钟域隔开，之后两个时钟域内的各个动态运行(run_time)的phase就可以不必同步。注意，这里domain只能隔离run-time的phase，对于其他phase，其实还是同步的。若将某个component置于某个新的domain中，可以使用如下的方式：
class B extends uvm_component;   uvm_domain new_domain;   `uvm_component_utils(B)   function new(string name, uvm_component parent);      super.new(name, parent);      new_domain = new(&quot;new_domain&quot;);   endfunction   virtual function void connect_phase(uvm_phase phase);      set_domain(new_domain);   endfunction   extern virtual  task reset_phase(uvm_phase phase);   extern virtual  task post_reset_phase(uvm_phase phase);   extern virtual  task main_phase(uvm_phase phase);   extern virtual  task post_main_phase(uvm_phase phase);endclass
这样B就是单独一个domain了，然后再运行的话会发现两者的运行时间发生了错位。刚才的A和B分别位于不同的domain中,在此种情况下,phase的跳转将只局限于某一个domain中。
class B extends uvm_component;   uvm_domain new_domain;   bit has_jumped;   `uvm_component_utils(B)   function new(string name, uvm_component parent);      super.new(name, parent);      new_domain = new(&quot;new_domain&quot;);      has_jumped = 0;   endfunction   virtual function void connect_phase(uvm_phase phase);      set_domain(new_domain);   endfunction   extern virtual  task reset_phase(uvm_phase phase);   extern virtual  task main_phase(uvm_phase phase);endclasstask B::reset_phase(uvm_phase phase);   phase.raise_objection(this);   `uvm_info(&quot;B&quot;, &quot;enter into reset phase&quot;, UVM_LOW)   #100;   phase.drop_objection(this);endtasktask B::main_phase(uvm_phase phase);   phase.raise_objection(this);   `uvm_info(&quot;B&quot;, &quot;enter into main phase&quot;, UVM_LOW)   #500;   if(!has_jumped) begin      phase.jump(uvm_reset_phase::get());      has_jumped = 1&#x27;b1;   end   phase.drop_objection(this);endtask
运行的结果是B两次进入了reset_phase和main_phase，而A只进入了一次。domain的应用使得phase的跳转可以只局限于验证平台的一部分。
总结在这一章主要讲述了在UVM中每一个phase的运算顺序，有的是一瞬间运行，一个是需要消耗仿真时间，同时还在跳转、独立性等方面进行了讨论，能够帮助读者更加灵活的进行代码的编写。
]]></content>
      <categories>
        <category>UVM学习笔记</category>
      </categories>
      <tags>
        <tag>UVM</tag>
      </tags>
  </entry>
  <entry>
    <title>【UVM项目实战】异步fifo—uvm项目结构以及uvm环境搭建</title>
    <url>/2025/04/24/d18911f2be8e/</url>
    <content><![CDATA[




一、异步FIFO1.1 异步FIFO的定义异步时序设计指的是在设计中有两个或以上的时钟， 且时钟之间是同频不同相或不同频率的关系。而异步时序设计的关键就是把数据或控制信号正确地进行跨时钟域传输。一个异步 FIFO 一般由如下部分组成：

Memory, 作为数据的存储器；
写逻辑部分，主要负责产生写信号和地址；
读逻辑部分，主要负责产生读信号和地址；
地址比较部分，主要负责产生 FIFO 空、满的标志。

跟普通的FIFO相比，异步FIFO实际上多了读写地址的跨时钟域同步的逻辑，以及两个时钟域中读写信号的比较逻辑。
1.2 亚稳态每一个触发器都有其规定的建立(setup)和保持(hold)时间参数, 在这个时间参数内， 输入信号在时钟的上升沿是不允许发生变的。 如果在信号的建立时间中对其进行采样， 得到的结果将是不可预知的，即亚稳态。为了避免亚稳态。采用双锁存器可以改善这一问题：





时钟域B两级同步的寄存器跟时钟域A的输出寄存器之间不能有组合逻辑。组合逻辑电路各个输入信号的不一致性以及组合逻辑内部路径的延时时间不一样，运算后的信号存在毛刺。





1.3 异步FIFO关键技术一这里用到了一个很重要的概念“回卷”，通常判断读写的地址是否相同来判断空和满，这里使用回卷技术，在深度为8的fifo中多一位来代表回卷位，当fifo溢出之后，回卷位会被置1，当读时钟和写时钟的回卷位不同而其他位相同时，表示fifo已经满，因为写地址在溢出后的位置，而读时钟在溢出前。




1.3 异步FIFO关键技术二将满和将空信号实际上表示更加保守的满和空信号。基本思路是，设定一个间隔值，当读写地址之间的间隔小于或等于该间隔就产生将空或将满信号。对于异步FIFO而言，由于同步过来的地址信号都是格雷码表示的，我们不能直接用格雷码去判断上述的这个间隔，所以需要先对接受到的格雷码进行解码变为二进制，再和当前时钟域下的另一个地址进行将满和将空的生成。
1.4 FIFO逻辑图




二、UVM结构该项目的UVM包括以下几个文件：fifo_if.svfifo_case0.svbase_test.svtop_tb.svfifo_driver.svfifo_model.svfifo_transaction.svfifo_in_monitor.svfifo_env.svfifo_scoreboard.svfifo_chk_rst.svfifo_in_sequencer.svfifo_in_agent.svmy_env.svfifo_out_monitor.svfifo_out_agent.sv下面是本次UVM的整体框架：




现在对每一个文件进行解释。
2.1 interface该文件主要是用于连接DUT的物理信号与UVM的事件信号，起主要是在top_tb中进行定义和连接，然后通过uvm_config_db进行定点发送。
`ifndef FIFO_IF__SV`define FIFO_IF__SV// 括号里面是时钟信号interface fifo_if(input wclk, input rclk, input wreset_b, input rreset_b);    logic write,read;	logic [31 : 0] wdata;	logic [31 : 0] rdata;    wire  wfull,rempty; // logic    /***********时钟约束************/    // wdata为inout    clocking ckw @(posedge wclk);		input  wfull;		inout  write;		inout  wdata;	endclocking    // wdata为input    clocking ckim @(posedge wclk);		input wfull;              		inout  write;             		input  wdata;	endclocking    //     clocking ckom @(posedge rclk);		input  rempty;		inout  read;		input  rdata;	endclocking    /***********方向约束************/    // 普通模式    modport DUT(		input write,		input read,		input wdata,		output rdata,		output wfull,		output rempty	);    // 读取模式    modport DRV(		clocking ckw,		input read,		input rdata,		input rempty	);        modport OMON(		clocking ckom,		input wfull,		input write,		input wdata	);endinterface //interfacename`endif
clocking主要是定义每个logic信号的方向，同时制定该信号同步的时钟域。括号里信号的作用是控制 clocking 块内的所有信号的同步时序。时钟信号 的上升沿会触发对这些信号的采样或更新。modport的作用是定义了一个接口的访问模式，指定了如何访问时钟块 ckw 和接口中的信号。具体来说，它允许从外部访问 read、rdata 和 rempty 信号，并且会在时钟块 ckw 中进行同步。
2.2 transactiontransaction主要是用于对信号进行打包操作，本项目只有一个输入data_in，因此只需要生成一个随机数据。同时基于约束并注册（这是基本操作）。
`ifndef FIFO_TRANSACTION__SV`define FIFO_TRANSACTION__SVclass fifo_transaction extends uvm_sequence_item;    // 产生的随机数据    rand bit[31:0] data_in[];        // 约束	constraint data_in_c &#123;		soft data_in.size inside &#123;[1:300]&#125;;	&#125;    // 将数据加入注册	`uvm_object_utils_begin(fifo_transaction)		`uvm_field_array_int(data_in,UVM_ALL_ON)	`uvm_object_utils_end        // 构造函数	function new(string name = &quot;fifo_transaction&quot;);		super.new(name);	endfunctionendclass`endif
2.3 driver驱动器是UVM中的核心，代码如下所示：
`ifndef FIFO_DRIVER__SV`define FIFO_DRIVER__SVclass fifo_driver extends uvm_driver#(fifo_transaction);    virtual fifo_if vif;    //define 功能覆盖率 是否达到 空 满 状态		covergroup cov_label;			option.per_instance = 1;			option.auto_bin_max = 2;			coverpoint vif.wfull;			coverpoint vif.rempty;		endgroup    // 注册    `uvm_component_utils(fifo_driver)    // 构造函数    function new(string name = &quot;fifo_driver&quot;, uvm_component parent = null);       super.new(name, parent);       cov_label = new(); // 创建覆盖率    endfunction    // 初始化函数    virtual function void build_phase(uvm_phase phase);		super.build_phase(phase);		if(!uvm_config_db#(virtual fifo_if)::get(this,&quot;&quot;,&quot;vif&quot;,vif))			`uvm_fatal(&quot;fifo_driver&quot;,&quot;virtual interface must be set for vif!!!&quot;)	endfunction    extern task main_phase(uvm_phase phase);    extern task drive_one_pkt(fifo_transaction tr);endclasstask fifo_driver::main_phase(uvm_phase phase);	`uvm_info(&quot;fifo_driver&quot;,&quot;begin!&quot;,UVM_LOW)	while(1) begin		seq_item_port.get_next_item(req); // 开始		drive_one_pkt(req);		seq_item_port.item_done(); // 结束	endendtasktask fifo_driver::drive_one_pkt(fifo_transaction tr);	int data_size,j;	data_size = tr.data_in.size();	`uvm_info(&quot;fifo_driver&quot;,&quot;begin to drive one pkt&quot;,UVM_LOW)	for(int i = 0; i &lt; data_size; i++) begin		@(vif.ckw); // 表示ckw中的内容发生变化		if((!vif.ckw.wfull) &amp;&amp; (vif.ckw.write == 1)) begin 			cov_label.sample(); 			vif.ckw.wdata &lt;= tr.data_in[i];			`uvm_info(&quot;fifo_driver&quot;,$sformatf(&quot;%0d number is sent,number is %0h&quot;,j++,vif.ckw.wdata),UVM_LOW) 		end  		else if((!vif.ckw.wfull) &amp;&amp; (vif.ckw.write == 0)) begin			vif.ckw.write &lt;= 1;			i--;		end 		else begin // 满了			vif.ckw.write &lt;= 0;			i--;		end	end  endtask`endif
关于覆盖率这里我们先不做介绍，后续会单独做期来讲解覆盖率
需要注意几点，首先在初始化函数中使用uvm_config_db来获取DUT信号，用于对DUT的信号进行写入与读取。其次是在main_phase中，使用driver自带的端口seq_item_port来获得一个包（就是刚才说的随机数据），这个端口会在agent中进行连接，来源就是sequencer，然后将包中的信息发送到DUT上。最后就是在drive_one_pkt中，使用@(vif.ckw);来捕获时钟上升沿，然后通过wfull和write的状态来决定是否发送数据。

可以看到，write和wdata信号均有写入和读取的操作，因此在ckw中设置为inout信号

2.3 monitermoniter的作用在于接受DUT的信息，有在输入和输出都有一个moniter。
`ifndef FIFO_IN_MONITOR__SV`define FIFO_IN_MONITOR__SVclass fifo_in_monitor extends uvm_monitor;   virtual fifo_if vif;   uvm_analysis_port #(fifo_transaction)  ap;   // 注册   `uvm_component_utils(fifo_in_monitor)   // 构造函数   function new(string name = &quot;fifo_in_monitor&quot;, uvm_component parent = null);      super.new(name, parent);   endfunction   // 初始化函数   virtual function void build_phase(uvm_phase phase);      super.build_phase(phase);      if(!uvm_config_db#(virtual fifo_if)::get(this, &quot;&quot;, &quot;vif&quot;, vif))         `uvm_fatal(&quot;fifo_in_monitor&quot;, &quot;virtual interface must be set for vif!!!&quot;)      ap = new(&quot;ap&quot;, this);   endfunction   extern virtual task main_phase(uvm_phase phase);   extern task collect_one_pkt(fifo_transaction tr);endclasstask fifo_in_monitor::main_phase(uvm_phase phase);	fifo_transaction tr;	repeat(2) begin		tr = new(&quot;tr&quot;);		#4.001;		collect_one_pkt(tr);		ap.write(tr);	endendtasktask fifo_in_monitor::collect_one_pkt(fifo_transaction tr);	int j,k;	`uvm_info(&quot;in_monitor&quot;,&quot;begin to collect one pkt&quot;,UVM_LOW) 	while(1) begin 		@(vif.ckim);  		if((!vif.ckim.wfull) &amp;&amp; (vif.ckim.write == 1)) begin // 符合要求			tr.data_in[j] = vif.ckim.wdata;			`uvm_info(&quot;in_monitor&quot;,$sformatf(&quot;%0d number is received,number is %0h&quot;,k++,vif.ckim.wdata),UVM_LOW)			if(j == 199)  break;   //seq1 发送200个数据 			j++;		end 	end	`uvm_info(&quot;in_monitor&quot;,&quot;end collect one pkt&quot;,UVM_LOW)	//tr.print();endtask`endif
与driver一样，也要使用uvm_config_db来获取DUT信号。但是这里定义了一个uvm_analysis_port端口其作用就是把接收到的数据transcation发送出。这里的#4.001大概率是为了等待刚刚发送的数据发送，这里挖一个坑。后面的collect_one_pkt与前面相同，当符合要求后将wdata读到data_in中，但是这里使用的是ckim，原因如上所示。输出的out_moniter与输入有两个区别，一个是没有#4.001，第二个就是使用的读时钟块ckom以及传输的是rdata。
2.4 sequencersequencer相当于sequence的下手，用于帮sequence传递数据的。
`ifndef FIFO_SEQUENCER__SV`define FIFO_SEQUENCER__SVclass fifo_sequencer extends uvm_sequencer #(fifo_transaction);   `uvm_component_utils(fifo_sequencer)	function new(string name = &quot;fifo_sequencer&quot;,uvm_component parent = null);		super.new(name,parent);	endfunction		task main_phase(uvm_phase phase);		`uvm_info(&quot;fifo_sequencer&quot;,&quot;main_phase begin&quot;,UVM_LOW)	endtaskendclass`endif
代码里没有要讲的，仅仅就定义了一下自己。
2.5 agentagent的作用仅仅就是将三巨头sequencer、driver和monitor进行连接。
`ifndef FIFO_IN_AGENT__SV`define FIFO_IN_AGENT__SVclass fifo_in_agent extends uvm_agent ;   // 三巨头   fifo_sequencer       sqr;   fifo_driver          drv;   fifo_in_monitor      mon;      uvm_analysis_port #(fifo_transaction)  ap; // 指向外面   `uvm_component_utils(fifo_in_agent)   function new(string name = &quot;fifo_in_agent&quot;, uvm_component parent);      super.new(name, parent);   endfunction       extern virtual function void build_phase(uvm_phase phase);   extern virtual function void connect_phase(uvm_phase phase);endclassfunction void fifo_in_agent::build_phase(uvm_phase phase);	super.build_phase(phase);	if(is_active == UVM_ACTIVE) begin		drv = fifo_driver::type_id::create(&quot;i_drv&quot;,this);		sqr = fifo_sequencer::type_id::create(&quot;i_sqr&quot;,this); 	end	mon = fifo_in_monitor::type_id::create(&quot;i_mon&quot;,this);endfunctionfunction void fifo_in_agent::connect_phase(uvm_phase phase);	super.connect_phase(phase);	if(is_active == UVM_ACTIVE) begin		drv.seq_item_port.connect(sqr.seq_item_export);	end	ap = mon.ap; // 调用mon的ap指针endfunction	`endif
需要注意的是，这里和moniter一样定义了一个uvm_analysis_port 端口，并且在connect_phase中使用ap = mon.ap;的方式将mon的ap的指针指向了该ap，实现外部直接调用mon.ap。is_active 是agent的固有方法，用来区分输入和输出。但是本项目中还定义了一个out_agent，这个方法应该冗余了。在out_agent中的mon变为out_mon，其余不变。在connect_phase连接中将sqr的输出与drv的输入连接，等待sqr提供数据。
2.6 modelmodel按理来说应该是一个参考，用来实现与DUT相同的操作，但这里仅仅定义了两个端口，从port端口到ap。
`ifndef FIFO_MODEL__SV`define FIFO_MODEL__SVclass fifo_model extends uvm_component;      uvm_blocking_get_port #(fifo_transaction)  port;   uvm_analysis_port #(fifo_transaction)  ap;   extern function new(string name, uvm_component parent);   extern function void build_phase(uvm_phase phase);   extern virtual  task main_phase(uvm_phase phase);   `uvm_component_utils(fifo_model)endclass function fifo_model::new(string name, uvm_component parent);   super.new(name, parent);endfunction function void fifo_model::build_phase(uvm_phase phase);   super.build_phase(phase);   port = new(&quot;port&quot;, this);   ap = new(&quot;ap&quot;, this);endfunctiontask fifo_model::main_phase(uvm_phase phase);   fifo_transaction tr;   fifo_transaction new_tr;   super.main_phase(phase);   while(1) begin      port.get(tr);      new_tr = new(&quot;new_tr&quot;);      new_tr.copy(tr);      `uvm_info(&quot;fifo_model&quot;, &quot;get one transaction, copy and print it:&quot;, UVM_LOW)      new_tr.print();      ap.write(new_tr);   endendtask`endif
2.7 scoreboardscoreboard用于收集来自agent以及model的数据。
`ifndef FIFO_SCOREBOARD__SV`define FIFO_SCOREBOARD__SVclass fifo_scoreboard extends uvm_scoreboard;   fifo_transaction  expect_queue[$];   uvm_blocking_get_port #(fifo_transaction)  exp_port;   uvm_blocking_get_port #(fifo_transaction)  act_port;   `uvm_component_utils(fifo_scoreboard)   extern function new(string name, uvm_component parent = null);   extern virtual function void build_phase(uvm_phase phase);   extern virtual task main_phase(uvm_phase phase);endclass function fifo_scoreboard::new(string name, uvm_component parent = null);   super.new(name, parent);endfunction function void fifo_scoreboard::build_phase(uvm_phase phase);   super.build_phase(phase);   exp_port = new(&quot;exp_port&quot;, this);   act_port = new(&quot;act_port&quot;, this);endfunction task fifo_scoreboard::main_phase(uvm_phase phase);   fifo_transaction  get_expect,  get_actual, tmp_tran;   bit result;    super.main_phase(phase);   fork       while (1) begin         exp_port.get(get_expect);         expect_queue.push_back(get_expect);      end      while (1) begin         act_port.get(get_actual);         if(expect_queue.size() &gt; 0) begin            tmp_tran = expect_queue.pop_front();            result = get_actual.compare(tmp_tran);            if(result) begin                `uvm_info(&quot;fifo_scoreboard&quot;, &quot;Compare SUCCESSFULLY&quot;, UVM_LOW);            end            else begin               `uvm_error(&quot;fifo_scoreboard&quot;, &quot;Compare FAILED&quot;);               $display(&quot;the expect pkt is&quot;);               tmp_tran.print();               $display(&quot;the actual pkt is&quot;);               get_actual.print();            end         end         else begin            `uvm_error(&quot;fifo_scoreboard&quot;, &quot;Received from DUT, while Expect Queue is empty&quot;);            $display(&quot;the unexpected pkt is&quot;);            get_actual.print();         end       end   joinendtask`endif
这里定义了两个接受端口，分别是exp_port以及act_port，其中exp_port来自fifo_model的输入，表示参考的数据。act_port来自o_agt，表示DUT的输出值。将这两个数值进行比较，从而判断程序是否发生错误。
2.8 envenv是整个UVM最接近顶层的存在，其主要包括三个部分：agent、model以及scoreboard。
`ifndef MY_ENV__SV`define MY_ENV__SVclass my_env extends uvm_env;   fifo_in_agent     i_agt;   fifo_out_agent    o_agt;   fifo_model        mdl;   fifo_scoreboard   scb;      uvm_tlm_analysis_fifo #(fifo_transaction) agt_scb_fifo;   uvm_tlm_analysis_fifo #(fifo_transaction) agt_mdl_fifo;   uvm_tlm_analysis_fifo #(fifo_transaction) mdl_scb_fifo;      function new(string name = &quot;my_env&quot;, uvm_component parent);      super.new(name, parent);   endfunction   virtual function void build_phase(uvm_phase phase);      super.build_phase(phase);      i_agt = fifo_in_agent::type_id::create(&quot;i_agt&quot;, this);      o_agt = fifo_out_agent::type_id::create(&quot;o_agt&quot;, this);      i_agt.is_active = UVM_ACTIVE;      o_agt.is_active = UVM_PASSIVE;      mdl = fifo_model::type_id::create(&quot;mdl&quot;, this);      scb = fifo_scoreboard::type_id::create(&quot;scb&quot;, this);      agt_scb_fifo = new(&quot;agt_scb_fifo&quot;, this);      agt_mdl_fifo = new(&quot;agt_mdl_fifo&quot;, this);      mdl_scb_fifo = new(&quot;mdl_scb_fifo&quot;, this);   endfunction   extern virtual function void connect_phase(uvm_phase phase);      `uvm_component_utils(my_env)endclassfunction void my_env::connect_phase(uvm_phase phase);   super.connect_phase(phase);   i_agt.ap.connect(agt_mdl_fifo.analysis_export);   mdl.port.connect(agt_mdl_fifo.blocking_get_export);   mdl.ap.connect(mdl_scb_fifo.analysis_export);   scb.exp_port.connect(mdl_scb_fifo.blocking_get_export);   o_agt.ap.connect(agt_scb_fifo.analysis_export);   scb.act_port.connect(agt_scb_fifo.blocking_get_export); endfunction`endif
这里面共定义了三个fifo，用来构建三者之间数据的缓冲，具体传输方向如下所示：fifo_model -&gt; mdl_scb_fifo -&gt; fifo_scoreboardfifo_out_agent-&gt; agt_scb_fifo-&gt; fifo_scoreboardfifo_in_agent -&gt; agt_scb_fifo -&gt; fifo_model从这里看也看到，在fifo_model 中传递的数据，其实是来自于fifo_in_agent ，当然，最为fifo输入和输出的数据确实是相同的。
2.9 base_testbase_test才是UVM真正的顶层，他的主要作用很简单，除了例化一个env之外，还可以进行项目错误的统计工作。
`ifndef BASE_TEST__SV`define BASE_TEST__SVclass base_test extends uvm_test;   my_env         env;      function new(string name = &quot;base_test&quot;, uvm_component parent = null);      super.new(name,parent);   endfunction      extern virtual function void build_phase(uvm_phase phase);   extern virtual function void report_phase(uvm_phase phase);   `uvm_component_utils(base_test)endclassfunction void base_test::build_phase(uvm_phase phase);   super.build_phase(phase);   env  =  my_env::type_id::create(&quot;env&quot;, this);endfunctionfunction void base_test::report_phase(uvm_phase phase);   uvm_report_server server;   int err_num;   super.report_phase(phase);   server = get_report_server();   err_num = server.get_severity_count(UVM_ERROR);   if (err_num != 0) begin      $display(&quot;TEST CASE FAILED&quot;);   end   else begin      $display(&quot;TEST CASE PASSED&quot;);   endendfunction`endif
在report_phase中定义了一个uvm_report_server 用于检测错误，根据错误的数目输出验证通过与否。
2.10 case_sequence这个相当于独立于整个UVM树之外的一个部分，用于产生激励信号。
`ifndef FIFO_CASE0__SV`define FIFO_CASE0__SVclass case0_sequence extends uvm_sequence #(fifo_transaction);	fifo_transaction trans;	`uvm_object_utils(case0_sequence)	function new(string name = &quot;case0_sequence&quot;);		super.new(name);	endfunction	virtual task body();		repeat(2) begin			`uvm_info(&quot;case0_sequence&quot;,&quot;generate one transaction!&quot;,UVM_LOW)			`uvm_do_with(trans,&#123;trans.data_in.size == 200;&#125;)		end	endtaskendclassclass test_case0 extends base_test;	`uvm_component_utils(test_case0)	function new(string name = &quot;test_case0&quot;, uvm_component parent = null);		super.new(name,parent);	endfunction	function void build_phase(uvm_phase phase);		super.build_phase(phase);	endfunction		task main_phase(uvm_phase phase);		case0_sequence seq;		phase.raise_objection(this);		#4;  		seq = case0_sequence::type_id::create(&quot;l_seq&quot;);		`uvm_info(&quot;case0_sequence&quot;,&quot;case1_sequence begin&quot;,UVM_LOW)		seq.start(env.i_agt.sqr);		#3000;		phase.drop_objection(this);	endtaskendclass`endif
在这里，使用uvm_do_with宏的方法实现将特定的数据传输到sequencer。但这里值得注意的是，在下面定义了一个从属于base_test的类test_case0 ，其也是UVM树的一部分，是从属于base_test的，因此与env的关系很近，但是这里其作用仅仅就是建立一个case0_sequence 并且运行，同时还是用phase.raise_objection(this)与phase.drop_objection(this)定义整个sequence事件的开始与结束。在这里指定了env.i_agt.sqr为发射的地点。
2.11 top_tb这就是最终的tb文件，代码如下，具体就不说了，无非就是例化初始化之类的操作，以及保存波形。

这里挖一个坑，针对这里asyn_fifo_chk_rst还没了解清楚。

`timescale 1ns/1ps`include &quot;uvm_macros.svh&quot;import asyn_fifo_chk_rst::*;import uvm_pkg::*;module top_tb();logic wclk,rclk,wreset_b,rreset_b;fifo_if my_if(wclk,rclk,wreset_b,rreset_b);fifo_top DUT(	.wclk		   (wclk),	.rclk		   (rclk),	.wreset_b	(wreset_b),     //wrst_n -&gt; wreset_b	.rreset_b	(rreset_b),	    //rrst_n -&gt; rreset_b	.write		(my_if.write),	//winc -&gt; write	.read		   (my_if.read),	//rinc -&gt; read	.wdata		(my_if.wdata),	.wfull		(my_if.wfull),	.rempty		(my_if.rempty),	.rdata		(my_if.rdata));fifo_rst_mon fifo_rst_mon1;fifo_chk_rst fifo_chk_rst1;event reset_e_w;event reset_e_r;initial begin	wclk = 0;	rclk = 0;	wreset_b = 1;	rreset_b = 1;	#2    wreset_b = 0;	rreset_b = 0;	my_if.write = 0;	my_if.read = 0;	#2    wreset_b = 1;	rreset_b = 1;end	always #1 wclk = ~wclk;always #3 rclk = ~rclk;// 参数传递initial begin	uvm_config_db#(virtual fifo_if)::set(null,&quot;uvm_test_top.env.i_agt.i_drv&quot;,&quot;vif&quot;,my_if);	uvm_config_db#(virtual fifo_if)::set(null,&quot;uvm_test_top.env.i_agt.i_mon&quot;,&quot;vif&quot;,my_if);	uvm_config_db#(virtual fifo_if)::set(null,&quot;uvm_test_top.env.o_agt.o_mon&quot;,&quot;vif&quot;,my_if);end// 参考？initial begin	fifo_rst_mon1 = new(reset_e_w,reset_e_r);	fifo_chk_rst1 = new(reset_e_w,reset_e_r);	fifo_rst_mon1.my_if6 = my_if;	fifo_chk_rst1.my_if7 = my_if;	fork		fifo_rst_mon1.run();		fifo_chk_rst1.run();	joinendinitial begin	$fsdbDumpfile(&quot;tb.fsdb&quot;);	$fsdbDumpvars;	$fsdbDumpon;endinitial begin   run_test(&quot;test_case0&quot;);endendmodule
三、UVM仿真环境的搭建这里我简单说一下，因为在环境搭建的过程中踩了很多坑，在网上的教程很乱，也没有一个完美的答案，这里就介绍一下我搭建UVM的结构图：




可以看出，我这里建立了三个文件夹，有源码DUT部分，存放仿真文件以及启动文件的sim还有存放tb文件和uvm文件的testbench文件。最重要的就是启动文件filelist和Makefile的编写。
3.1 Makefile文件的编写先给出我的Makefile文件：
.PHONY:file vcs sim verdi cleanVCS = vcs -full64 -cpp g++-4.8 -cc gcc-4.8 \	-LDFLAGS -Wl,--no-as-needed \	-f filelist.f \	-timescale=1ns/1ps \	-R \	-debug_acc+all \	+define+FSDB \	-lca -kdb \	-ntb_opts uvm-1.1 \	-sverilog \	+v2k \	|tee vcs.log	file:	find ../ -name &quot;*.v&quot; -o -name &quot;*.sv&quot; &gt; file.f	vcs:	$&#123;VCS&#125;sim:	./simv -gui |tee sim.log &amp;verdi:	verdi -f filelist.f -sv -ssf tb.fsdb &amp;clean:	rm -rf csrc verdiLog simv.daidir \	novas.* \	vc_hdrs.h \	simv \	*.key \	*.fsdb \	*.log \	inter.vpd \	DVEfiles
这里包括了五个部分，分别是file、vcs、sim、verdi以及clean。我分开来介绍：

file：这个主要是用于生成filelist文件，但也不全是filelist，因为该脚本只能获取所有的.v和.sv文件，在filelist中的编写不仅仅要包含这个，而且还有uvm包的文件，并且这些文件的先后顺序有严格的要求，这个后面讲解。
vcs：这个主要是启动vcs对所有的文件进行编译，在Makefile中添加了很多附加选项，这些选项都是能够让vcs正常运行的选项，你可以使用vcs help来获取vcs命令手册，里面解释了所有符号的意义以及用法。

# 指定使用 VCS (Verilog Compiler Simulator) 进行仿真编译VCS = vcs -full64 -cpp g++-4.8 -cc gcc-4.8 \	# -full64: 使用 64 位编译选项，适用于 64 位操作系统	# -cpp g++-4.8: 指定 C++ 编译器使用 g++ 版本 4.8	# -cc gcc-4.8: 指定 C 编译器使用 gcc 版本 4.8	-LDFLAGS -Wl,--no-as-needed \	# -LDFLAGS: 启用链接器的标志	# -Wl,--no-as-needed: 在链接时告诉链接器不要自动移除未使用的库	-f filelist.f \	# -f filelist.f: 指定仿真源文件列表，filelist.f 是一个包含所有待编译文件的文件列表	-timescale=1ns/1ps \	# -timescale=1ns/1ps: 设置仿真时间尺度为 1ns（纳秒）/ 1ps（皮秒）	-R \	# -R: 启用调试和恢复功能	-debug_acc+all \	# -debug_acc+all: 启用所有的调试访问器，允许调试仿真时查看所有信号和变量	+define+FSDB \	# +define+FSDB: 定义一个名为 FSDB 的宏，通常用于控制 FSDB 文件（仿真波形文件）的输出	-lca -kdb \	# -lca: 启用 LCA (Library Coverage Analysis)，用于库覆盖分析	# -kdb: 启用 KDB (Kernel Debugger)，为调试目的启用内核调试功能	-ntb_opts uvm-1.1 \	# -ntb_opts uvm-1.1: 启用与 UVM 1.1 兼容的 NTB（Native Testbench）选项，适用于 UVM（Universal Verification Methodology）验证环境	-sverilog \	# -sverilog: 启用 SystemVerilog 编译支持	+v2k \	# +v2k: 启用 Verilog-2001（V2K）编译选项	|tee vcs.log	# |tee vcs.log: 使用 tee 命令将 VCS 编译过程的输出同时显示在终端并保存到 vcs.log 文件中


sim：用来使用vcs自带的仿真工具生成波形，这里我没用过。
verdi：用来查看fsdb的波形文件，这个是我最常用的，通过这个可以很方便的对波形进行追溯，调试起来很容易。
clean：用来删除生成了的文件。

以防有人不会用Makefile，说一下他的用法。在Makefile文件所在的目录打开终端，使用make [指令]的方式来运行，Makefile本质来说就是将指令进行了一个打包，我这里运行verdi -f filelist.f -sv -ssf tb.fsdb &amp;和make verdi的效果是一样的。
3.2 filelist文件的编写下面是我针对本项目编写的filelist文件。
+incdir+$UVM_HOME/src$UVM_HOME/src/uvm_pkg.sv../testbench/fifo_if.sv../testbench/fifo_transaction.sv../testbench/fifo_driver.sv../testbench/fifo_in_sequencer.sv../testbench/fifo_in_monitor.sv../testbench/fifo_out_monitor.sv../testbench/fifo_in_agent.sv../testbench/fifo_out_agent.sv../testbench/fifo_model.sv../testbench/fifo_scoreboard.sv../testbench/my_env.sv../testbench/fifo_chk_rst.sv../testbench/base_test.sv../testbench/fifo_case0.sv../testbench/top_tb.sv../DUT/pointer.v../DUT/sync.v../DUT/fifo_top.v../DUT/memory.v../DUT/comparator.v
可以分为三个部分，首先是前两行的+incdir+$UVM_HOME/src和$UVM_HOME/src/uvm_pkg.sv，第一句话表示将$UVM_HOME/src中的所有文件加入到编译列表中，这个文件里基本上是所有uvm库所需要的文件，什么uvm_env呀之类的就是这里定义。然后uvm_pkg.sv相当于是所有文件的核心实现，在tob_tb中，只需要调用import uvm_pkg::*;便可以将所有uvm包含进来。

$UVM_HOME表示的是一个宏定义，在Lunix中主目录的.bashrc中定义，我这里的原话是export UVM_HOME=/home/wxm/uvm_study/uvm-1.1d后面紧接着是testbench中的文件，注意一定要先写testbench再写dut，以防报错。然后在testbench内部也要按照顺序，从独立到树枝再到树根的顺序，比如献血interface和transaction，再从树枝的dirver开始写到树根base_case。因为在UVM编译的过程中是从上到下的顺序，如果你先编译base_case，编译器会报错说找不到env。最后就是top_tb以及其余的DUT文件。但是貌似DUT文件没有内部顺序

3.3 另辟蹊径还有一个别的方法，你只需要写两个文件就可以：一个是top_tb.sv;另一个是fifo_top.v，前提是你需要在这两个文件里面把其余所有的文件include一遍，就像这样：
`include &quot;../testbench/my_driver.sv&quot;`include &quot;../testbench/my_model.sv&quot;...
因为你的Makefile和filelist以及终端运行的位置都在sim文件夹，而其他文件在testbench和dut文件夹，因此你在include的时候需要以sim文件夹为根目录，使用../回到上一级，再使用/testbench/XXX.sv来调用这些文件。这样操作就不需要在filelist中调整顺序了。

总结总而言之，这是一个很好的练习UVM的项目，因为其与《UVM实战》这本书的内容大差不差，很多在结构上都有相似的地方，我希望从这个项目为起点，依次加深我对IC验证这一领域的认识。后面我会对该项目的波形图进行研究，并通过调整UVM代码实现一些不一样的功能。
]]></content>
      <categories>
        <category>UVM学习笔记</category>
      </categories>
      <tags>
        <tag>UVM 简单ic模块</tag>
      </tags>
  </entry>
</search>
