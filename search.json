[{"title":"【UVM学习笔记】UVM验证平台的运行—Phase以及objection","url":"/2025/04/16/130da575206a/","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n---\n\n# 一、phase机制\n## 1.1 task phase与function phase\n\nUVM中的phase，按照其是否消耗仿真时间的特性，可以分成两大类,一类是function phase，如build_phase、connect_phase等，这些phase都不耗费仿真时间，通过函数来实现；另外一类是task phase，如run_phase等，它们耗费仿真时间，通过任务来实现。\n灰色背景所示的是task phase，其他为function phase。\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/aaf62ae602a4440c9dd7e022a9dedf85.png\" height=300 >\n</div>\n\n值得注意的是，task phase中，run_phase和pre_reset_phase等12个小的phase并行运行。后者称为动态运行的phase。\n分成小的phase是为了实现更加精细化的控制。reset、configure、main、shutdown四个phase是核心，这四个phase通常模拟DUT的正常工作方式，在reset_phase对DUT进行复位、初始化等操作，在configure_phase则进行DUT的配置，DUT的运行主要在main_phase完成，shutdown_phase则是做一些与DUT断电相关的操作。\n## 1.2 代码执行顺序\n对于UVM树来说，共有三种顺序可以选择，一是自上而下，二是自下而上，三是随机序。最后一种方式是不受人控制的，在编程当中，这种不受控制的代码越少越好。因此可以选择的无非就是自上而下或者自下而上。\n除了build_phase之外，所有不耗费仿真时间的phase(即function phase)都是自下而上执行的。\n对于同一层次的、具有兄弟关系的component，其执行顺序是按照字典序的。\n## 1.3 super.phase的内容\n对于build_phase来说，uvm_component对其做的最重要的事情就是自动获取通过config_db::set设置的参数。除build_phase外,在写其他phase时,完全可以不必加上super.xxxx_phase语句。\n## 1.4 phase的跳转\nphase的跳转是比较高级的功能，假如在验证平台中监测到reset_n信号为低电平,则马上从main_phase跳转到reset_phase。driver的代码如下:\n```java\ntask my_driver::reset_phase(uvm_phase phase);\n   phase.raise_objection(this); \n   `uvm_info(\"driver\", \"reset phase\", UVM_LOW)\n   vif.data <= 8'b0;\n   vif.valid <= 1'b0;\n   while(!vif.rst_n)\n      @(posedge vif.clk);\n   phase.drop_objection(this); \nendtask\n\ntask my_driver::main_phase(uvm_phase phase);\n   `uvm_info(\"driver\", \"main phase\", UVM_LOW)\n   fork\n      while(1) begin\n         seq_item_port.get_next_item(req);\n         drive_one_pkt(req);\n         seq_item_port.item_done();\n      end\n      begin\n         @(negedge vif.rst_n);\n         phase.jump(uvm_reset_phase::get());\n      end\n   join\nendtask\n```\nreset_phase主要做一些清理工作,并等待复位完成。main_phase中一旦监测到reset_n为低电平,则马上跳转到reset_phase。\n# 二、objection机制\nobjection字面的意思就是反对、异议。在验证平台中，可以通过drop_objection来通知系统可以关闭验证平台。当然，在撤销之前首先要raise_objection\n如果UVM发现此phase没有提起任何objection,那么将会直接跳转到下一个phase中。\n一般来说,在一个实际的验证平台中,通常会在以下两种objection的控制策略中选择一种:  \n## 2.1 在scoreboard中进行控制\n如果要在scoreboard中控制objection，则需要通过config_db::set的方式设置收集到的transaction的数量pkt_num，当收集到足够数量的transaction后跳出循环：\n```java\ntask my_scoreboard::main_phase(uvm_phase phase); \n\tphase.raise_objection(this); \n\tfork \n\t\twhile (1) begin \n\t\t\texp_port.get(get_expect); \n\t\t\texpect_queue.push_back(get_expect); \n\t\tend \n\t\tfor(int i = 0; i < pkt_num; i++) begin \n\t\t\tact_port.get(get_actual); \n\t\t\t...  \n\t\tend\n\tjoin_any \n\tphase.drop_objection(this); \nendtask\n```\n上述代码中将原本的fork...join语句改为了fork...join_any。当收集到足够的transaction后，第二个进程终结，从而跳出fork...join_any，执行drop_objection语句。\n## 2.1 在sequence中进行控制\n当sequence完成后,再撤销此objection。这里就是之前章节的例子：\n```java\ntask my_case0::main_phase(uvm_phase phase);\n   phase.raise_objection(this);\n   `uvm_info(\"case0\", \"main_phase\", UVM_LOW)\n   #10000;\n   phase.drop_objection(this);\nendtask\n```\n以上两种方式在验证平台中都有应用。其中用得最多的是第二种,这种方式是UVM提倡的方式。UVM的设计哲学就是全部  由sequence来控制激励的生成,因此一般情况下只在sequence中控制objection。\n但是有一个问题就是：在sequence中，n时刻发送完毕最后一个transaction，如果此时立刻drop_objection，那么最后在n+p时刻DUT输出的包将无法接收到。因此,在sequence中，最后一个包发送完毕后，要延时p时间才能drop_objection，对应的图如下所示：\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/1320ea55339349eb9cd2867a6a16db27.png\" height=400 >\n</div>\n\n```java\nvirtual task body(); \n\tif(starting_phase != null) \n\t\tstarting_phase.raise_objection(this); \n\trepeat (10) begin \n\t\t`uvm_do(m_trans) \n\tend \n\t#100; \n\tif(starting_phase != null) \n\t\tstarting_phase.drop_objection(this); \nendtask\n```\n还有一种方法就是在最顶层运行下面的代码：\n```java\nphase.phase_done.set_drain_time(this, 200);\n```\n这样在你撤销drop_objection后还会等待一段时间，提高了灵活性。\n\n# 二、domain机制\n在默认情况下，验证平台中所有component都位于一个名字为common_domain的domain中，假设有两个driver，那么两者在每一个phase的运行都是同步的。若要体现出独立性,那么两个部分的reset_phase、configure_phae、main_phase等就不应该同步。此时就应该让其中的一部分从common_domain中独立出来，使其位于不同的domain中。\n下面是两个在不同的domain的情况：\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/95189bdac85a4426b39cabad71dfbff3.png\" height=350 >\n</div>\n\ndomain把两块时钟域隔开，之后两个时钟域内的各个动态运行(run_time)的phase就可以不必同步。注意，这里domain只能隔离run-time的phase，对于其他phase，其实还是同步的。\n若将某个component置于某个新的domain中，可以使用如下的方式：\n```java\nclass B extends uvm_component;\n   uvm_domain new_domain;\n   `uvm_component_utils(B)\n\n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n      new_domain = new(\"new_domain\");\n   endfunction\n\n   virtual function void connect_phase(uvm_phase phase);\n      set_domain(new_domain);\n   endfunction\n\n   extern virtual  task reset_phase(uvm_phase phase);\n   extern virtual  task post_reset_phase(uvm_phase phase);\n   extern virtual  task main_phase(uvm_phase phase);\n   extern virtual  task post_main_phase(uvm_phase phase);\nendclass\n```\n这样B就是单独一个domain了，然后再运行的话会发现两者的运行时间发生了错位。\n刚才的A和B分别位于不同的domain中,在此种情况下,phase的跳转将只局限于某一个domain中。\n```java\nclass B extends uvm_component;\n   uvm_domain new_domain;\n   bit has_jumped;\n   `uvm_component_utils(B)\n\n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n      new_domain = new(\"new_domain\");\n      has_jumped = 0;\n   endfunction\n\n   virtual function void connect_phase(uvm_phase phase);\n      set_domain(new_domain);\n   endfunction\n\n   extern virtual  task reset_phase(uvm_phase phase);\n   extern virtual  task main_phase(uvm_phase phase);\nendclass\n\ntask B::reset_phase(uvm_phase phase);\n   phase.raise_objection(this);\n   `uvm_info(\"B\", \"enter into reset phase\", UVM_LOW)\n   #100;\n   phase.drop_objection(this);\nendtask\n\ntask B::main_phase(uvm_phase phase);\n   phase.raise_objection(this);\n   `uvm_info(\"B\", \"enter into main phase\", UVM_LOW)\n   #500;\n   if(!has_jumped) begin\n      phase.jump(uvm_reset_phase::get());\n      has_jumped = 1'b1;\n   end\n   phase.drop_objection(this);\nendtask\n```\n运行的结果是B两次进入了reset_phase和main_phase，而A只进入了一次。domain的应用使得phase的跳转可以只局限于验证平台的一部分。\n# 总结\n\n在这一章主要讲述了在UVM中每一个phase的运算顺序，有的是一瞬间运行，一个是需要消耗仿真时间，同时还在跳转、独立性等方面进行了讨论，能够帮助读者更加灵活的进行代码的编写。\n","tags":["UVM"],"categories":["UVM学习笔记"]},{"title":"【UVM学习笔记】UVM中的“类”","url":"/2025/04/16/7fdd63537fc6/","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n---\n\n# 一、UVM派生结构\n\n在上一篇博客讲述了UVM的结构，大家可以发现所有的结构分为两大类，一个是uvm_component，另一个是uvm_object。\nuvm_object是UVM中最基本的类,读者能想到的几乎所有的类都继承自uvm_object，包括uvm_component。uvm_component有两大特性是uvm_object所没有的，一是通过在new的时候指定parent参数来形成一种树形的组织结构，二是有phase的自动执行特点。下面是整个UVM类的派生图：\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/87e82a770ff145c783f504c47290c2bb.png\" height=300 >\n</div>\n\n## 1.1 来自uvm_object的类\n既然uvm_object是最基本的类,那么其能力恰恰也是最差的,当然了,其扩展性也是最好的。下面这几个是派生与其的类：\n1. uvm_sequence_item：之前定义的所有的transaction要从uvm_sequence_item派生。在UVM中，不能从uvm_transaction派生一个transaction，而要从uvm_sequence_item派生。因为uvm_sequence_item是从uvm_transaction派生而来的，因此uvm_sequence_item相比uvm_transaction添加了很多实用的成员变量和函数/任务。\n2. uvm_sequence：所有的sequence要从uvm_sequence派生。sequence就是sequence_item的组合。\n3. config：所有的config一般直接从uvm_object派生。config的主要功能就是规范验证平台的行为方式。如规定driver在读取总线时  地址信号要持续几个时钟,片选信号从什么时候开始有效等。但是不要和前面的uvm_config_db搞混了\n\n除了这些，还有一些没有见过的：\n- uvm_reg_item派生自uvm_sequence_item,用于register model中。\n- uvm_reg_map、uvm_mem、uvm_reg_field、uvm_reg、uvm_reg_file、uvm_reg_block等与寄存器相关的众多的类都是派生自uvm_object，它们都是用于register model。\n- uvm_phase派生自uvm_object，其主要作用为控制uvm_component的行为方式,使得uvm_component平滑地在各个不同的phase之间依次运转。\n\n## 1.2 来自uvm_component的类\n这个就是上一篇博客中树的各个部分了。\n- uvm_driver：所有的driver都要派生自uvm_driver。driver的功能主要就是向sequencer索要sequence_item，并且将sequence_item里的信息驱动到DUT的端口上。\n下面是其成员变量：\n```java\nuvm_seq_item_pull_port #(REQ, RSP) seq_item_port; \nuvm_seq_item_pull_port #(REQ, RSP) seq_item_prod_if; // alias \nuvm_analysis_port #(RSP) rsp_port; \nREQ req; \nRSP rsp;\n```\n- uvm_monitor：所有的monitor都要派生自uvm_monitor。monitor做的事情与driver相反，driver向DUT的pin上发送数据，而monitor则是从DUT的pin上接收数据，并且把接收到的数据转换成transaction级别的sequence_item，再把转换后的数据发送给scoreboard。\n- uvm_sequencer：所有的sequencer都要派生自uvm_sequencer。sequencer的功能就是组织管理sequence，当driver要求数据时,  它就把sequence生成的sequence_item转发给driver。\n- uvm_scoreboard：一般的scoreboard都要派生自uvm_scoreboard。scoreboard的功能就是比较reference model和monitor分别发送来的数据,根据比较结果判断DUT是否正确工作。\n- reference model：UVM中并没有针对reference model定义一个类。所以通常来说，reference model都是直接派生自uvm_component。reference model的作用就是模仿DUT，完成与DUT相同的功能。\n- uvm_agent：所有的agent要派生自uvm_agent。与前面几个比起来，uvm_agent的作用并不是那么明显。它只是把driver和monitor封装在一起，根据参数值来决定是只实例化monitor还是要同时实例化driver和monitor。\n- uvm_env：所有的env(environment的缩写)要派生自uvm_env。env将验证平台上用到的固定不变的component都封装在一起。\n- uvm_test：所有的测试用例要派生自uvm_test或其派生类，不同的测试用例之间差异很大，所以从uvm_test派生出来的类各不相同。\n\n# 二、UVM中打印信息的控制\n## 2.1 冗余度\nUVM通过冗余度级别的设置提高了仿真日志的可读性。在打印信息之前，UVM会比较要显示信息的冗余度级别与默认的冗余度阈值，如果小于等于阈值，就会显示，否则不会显示。\n默认的冗余度阈值是UVM_MEDIUM，所有低于等于UVM_MEDIUM(如UVM_LOW)的信息都会被打印出来。\n## 2.2 重载\n重载是深入到UVM骨子里的一个特性。UVM默认有四种信息严重性:UVM_INFO、UVM_WARNING、UVM_ERROR、  UVM_FATAL。这四种严重性可以互相重载。\n## 2.3 UVM_ERROR到达一定数量结束仿真\n当uvm_fatal出现时,表示出现了致命错误,仿真会马上停止。UVM同样支持UVM_ERROR达到一定数量时结束仿真。这个功能非常有用。\n实现这个功能的是set_report_max_quit_count函数：\n```java\nfunction void base_test::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   env  =  my_env::type_id::create(\"env\", this); \n   set_report_max_quit_count(5);\nendfunction\n```\n## 2.4 UVM的断点功能\n在程序调试时，断点功能是非常有用的一个功能。\n在程序运行时，预先在某语句处设置一断点。当程序执行到此处时，停止仿真，进入交互模式，从而进行调试。\n断点功能需要从仿真器的角度进行设置，不同仿真器的设置方式不同。为了消除这些设置方式的不同，UVM支持内建的断点功能，当执行到断点时，自动停止仿真，进入交互模式：\n```java\nenv.i_agt.drv.set_report_severity_action(UVM_WARNING, UVM_DISPLAY| UVM_STOP);\n```\n## 2.5 将输出信息导入文件中\nUVM会将UVM_INFO等信息显示在标准输出(终端屏幕)上。各个仿真器提供将显示在标准输出的信息同时输出到一个日志文件中的功能。\n```java\n   virtual function void connect_phase(uvm_phase phase);\n       driver_log = $fopen(\"driver.log\", \"w\");\n       drv_log = $fopen(\"drv.log\", \"w\");\n       env.i_agt.drv.set_report_severity_id_file(UVM_WARNING, \"my_driver\", driver_log);\n       env.i_agt.drv.set_report_severity_id_file(UVM_INFO, \"my_drv\", drv_log);\n       env.i_agt.drv.set_report_id_action(\"my_driver\", UVM_DISPLAY| UVM_LOG);\n       env.i_agt.drv.set_report_id_action(\"my_drv\", UVM_DISPLAY| UVM_LOG);\n   endfunction\n```\n上述代码将env.i_agt.drv的UVM_INFO输出到info.log，UVM_WARNING输出到warning.log，UVM_ERROR输出到error.log，  UVM_FATAL输出到fatal.log。\n## 2.5 控制打印信息的行为\n有很多宏定义：\n```java\ntypedef enum {  \n\t UVM_NO_ACTION = 'b000000,\n\t UVM_DISPLAY = 'b000001, \n\t UVM_LOG = 'b000010, \n\t UVM_COUNT = 'b000100, \n\t UVM_EXIT = 'b001000, \n\t UVM_CALL_HOOK = 'b010000, \n\t UVM_STOP = 'b100000 \n } uvm_action_type;\n ```\n其中UVM_NO_ACTION是不做任何操作;UVM_DISPLAY是输出到标准输出上;UVM_LOG是输出到日志文件中,它能工作  的前提是设置好了日志文件;UVM_COUNT是作为计数目标;UVM_EXIT是直接退出仿真;UVM_CALL_HOOK是调用一个回调  函数;UVM_STOP是停止仿真,进入命令行交互模式。\n\n# 三、config_db机制\n路径和层次结构是两个不同的概念，如果你使用了下面的代码：\n```java\ndrv = my_driver::type_id::create(\"driver\");\n```\n这样的话，那么drv在my_casen看来，层次结构依然是env.i_agt.drv，但其路径变为了env.i_agt.driver。在好的编码习惯中，这种变量名与 其实例化时传递的名字不一致的情况应该尽量避免。\n## 3.1 set与get函数的参数\nconfig_db机制用于在UVM验证平台间传递参数。set函数是寄信，而get函数是收信。代码如下：\n```java\nuvm_config_db#(int)::set(this, \"env.i_agt.drv\", \"pre_num\", 100);\n```\n其中第一个和第二个参数联合起来组成目标路径，与此路径符合的目标才能收信。第一个参数必须是一个uvm_component实例的指针，第二个参数是相对此实例的路径。第三个参数表示一个记号，用以说明这个值是传给目标中的哪个成员的，第四个参数是要设置的值。\n在driver中的build_phase使用如下方式收信：\n```java\nuvm_config_db#(int)::get(this, \"\", \"pre_num\", pre_num);\n```\nget函数中的第一个参数和第二个参数联合起来组成路径。\n## 3.2 跨层次的多重设置\n假如uvm_test_top和env中都对driver的pre_num的值进行了设置，获得的数值还是uvm_test_top，UVM规定层次越高,那么它的优先级越高。这里的层次指的是在UVM  树中的位置,越靠近根结点uvm_top,则认为其层次越高。\n当跨层次来看待问题时，是高层次的set设置优先；当处于同一层次时，上节已经提过，是时间优先。\n## 3.3 非直线的设置与获取\n若在其他component，如scoreboard中，对driver的某些变量使用config_db机制进行设置,则称为非直线的设置，我们应该尽量避免这种方式。\n\n\n# 总结\n\n本次描述了在上一节定义的众多组件的详细介绍，能够让我们更加深刻的了解UVM各组件之间的协调运转。\n\n","tags":["UVM"],"categories":["UVM学习笔记"]},{"title":"【UVM学习笔记】更加灵活的UVM—通信","url":"/2025/04/16/e224389c0e0d/","content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n---\n\n# 一、TLM是什么？\n\nTLM是Transaction Level Modeling(事务级建模)的缩写。所谓transaction level是相对DUT中各个模块之间信号线级别的通信来说的。\nTLM通常有三种模式：\n1. put操作，通信的发起者A把一个transaction发送给B。在这个过程中，A称为“发起者”，而B称为“目标”。A具有的端口(用方框表示)称为PORT，而B的端口(用圆圈表示)称为EXPORT。这个过程中，数据流是从A流向B的。\n2. get操作。在这个过程中，A依然是“发起者”，B依然是“目标”，A上的端口依然是PORT，而B上的端口依然是EXPORT。这个过程中,数据流是从B流向A的。PORT和EXPORT体现的是控制流而不是数据流。\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/6fde0b06fb0d469ca26c326695b56f74.png\" height=250 >\n</div>\n\n4. transport操作，transport操作相当于一次put操作加一次get操作，这两次操作的“发起者”都是A，目标都是B。在这个过程中,数据流先从A流向B，再从B流向A。在现实世界中,  相当于是A向B提交了一个请求(request),而B返回给A一个应答(response)。\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/3d1e5110e48d48408bd95e21d1a2ff84.png\" height=250 >\n</div>\n\n# 二、put操作\n## 2.1、建立PORT和EXPORT的连接\nUVM中使用connect函数来建立连接关系。如A要和B通信(A是发起者)，那么可以这么写：A.port.connect(B.export)。下面是A的代码部分：\n```java\nclass A extends uvm_component;\n   `uvm_component_utils(A)\n\n   uvm_blocking_put_port#(my_transaction) A_port;\n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n   endfunction\n\n   extern function void build_phase(uvm_phase phase);\n   extern virtual  task main_phase(uvm_phase phase);\nendclass\n\nfunction void A::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   A_port = new(\"A_port\", this);\nendfunction\n\ntask A::main_phase(uvm_phase phase);\nendtask\n```\n然后得到B的代码：\n```java\nclass B extends uvm_component;\n   `uvm_component_utils(B)\n\n   uvm_blocking_put_export#(my_transaction) B_export;\n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n   endfunction\n\n   extern function void build_phase(uvm_phase phase);\n   extern virtual  task main_phase(uvm_phase phase);\nendclass\n\nfunction void B::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   B_export = new(\"B_export\", this);\nendfunction\n\ntask B::main_phase(uvm_phase phase);\nendtask\n```\n然后在env将两者进行链接\n```java\nclass my_env extends uvm_env;\n\n   A   A_inst;\n   B   B_inst;\n   \n   \n   function new(string name = \"my_env\", uvm_component parent);\n      super.new(name, parent);\n   endfunction\n\n   virtual function void build_phase(uvm_phase phase);\n      super.build_phase(phase);\n\n      A_inst = A::type_id::create(\"A_inst\", this);\n      B_inst = B::type_id::create(\"B_inst\", this);\n\n   endfunction\n\n   extern virtual function void connect_phase(uvm_phase phase);\n   \n   `uvm_component_utils(my_env)\nendclass\n\nfunction void my_env::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\n   A_inst.A_port.connect(B_inst.B_export);\nendfunction\n```\n## 2.2 IMP组件\n除了TLM中定义的PORT与EXPORT外，UVM中加入了第三种端口：IMP，起作用相当于在EXPORT后进行接受操作。\n添加IMP后，A的代码变为：\n```java\ntask A::main_phase(uvm_phase phase);\n   my_transaction tr;\n   repeat(10) begin\n      #10;\n      tr = new(\"tr\");\n      assert(tr.randomize());\n      A_port.put(tr);\n   end\nendtask\n```\n在B中需要改动的要多一点：\n```java\nclass B extends uvm_component;\n   `uvm_component_utils(B)\n\n   uvm_blocking_put_export#(my_transaction) B_export;\n   uvm_blocking_put_imp#(my_transaction, B) B_imp;\n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n   endfunction\n\n   extern function void build_phase(uvm_phase phase);\n   extern function void connect_phase(uvm_phase phase);\n   extern function void put(my_transaction tr);\n   extern virtual  task main_phase(uvm_phase phase);\nendclass\n\nfunction void B::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   B_export = new(\"B_export\", this);\n   B_imp = new(\"B_imp\", this);\nendfunction\n\nfunction void B::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\n   B_export.connect(B_imp);\nendfunction\n\nfunction void B::put(my_transaction tr);\n   `uvm_info(\"B\", \"receive a transaction\", UVM_LOW) \n   tr.print();\nendfunction\n```\n在上述连接关系中，IMP是作为连接的终点。在UVM中，只有IMP才能作为连接关系的终点。如果是PORT或者EXPORT作为终点，则会报错。\n\n# 三、get操作\nget系列端口与put系列端口在某些方面完全相反。在这种连接关系中，数据流依然是从A到B，但是A由动作发起者变成了动作接收者，而B由动作接收者变成了动作发起者。\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/f21b4b2ebace4ef7b979a76423f57127.png\" height=250 >\n</div>\n\nB_port的类型为uvm_blocking_get_port,A_export的类型为uvm_blocking_get_export,A_imp的类型为uvm_blocking_get_imp。A的代码为：\n```java\nclass A extends uvm_component;\n   `uvm_component_utils(A)\n\n   uvm_blocking_get_export#(my_transaction) A_export;\n   uvm_blocking_get_imp#(my_transaction, A) A_imp;\n   my_transaction tr_q[$];\n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n   endfunction\n\n   extern function void build_phase(uvm_phase phase);\n   extern function void connect_phase(uvm_phase phase);\n   extern virtual  task get(output my_transaction tr);\n   extern virtual  task main_phase(uvm_phase phase);\nendclass\n\nfunction void A::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   A_export = new(\"A_export\", this);\n   A_imp = new(\"A_imp\", this);\nendfunction\n\nfunction void A::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\n   A_export.connect(A_imp); \nendfunction\n\ntask A::get(output my_transaction tr);\n   while(tr_q.size() == 0) #2;\n   tr = tr_q.pop_front();\nendtask\n\ntask A::main_phase(uvm_phase phase);\n   my_transaction tr;\n   repeat(10) begin\n      #10;\n      tr = new(\"tr\");\n      tr_q.push_back(tr); \n   end\nendtask\n```\n在A的get任务中，每隔2个时间单位检查tr_q中是否有数据，如果有则发送出去。当B在其main_phase调用get任务时，会最终执行A的get任务。在A的connect_phase，需要把A_export和A_imp连接起来。下面是B的部分：\n```java\nclass B extends uvm_component;\n   `uvm_component_utils(B)\n\n   uvm_blocking_get_port#(my_transaction) B_port;\n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n   endfunction\n\n   extern function void build_phase(uvm_phase phase);\n   extern virtual  task main_phase(uvm_phase phase);\nendclass\n\nfunction void B::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   B_port = new(\"B_port\", this);\nendfunction\n\ntask B::main_phase(uvm_phase phase);\n   my_transaction tr;\n   while(1) begin\n      B_port.get(tr);\n      `uvm_info(\"B\", \"get a transaction\", UVM_LOW) \n      tr.print();\n   end\nendtask\n```\n在这些连接关系中,需要谨记的是连接的终点必须是一个IMP。\n\n# 四、transport端口\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/338adb1c77e1463ebebd3ca9ee331816.png\" height=250 >\n</div>\n\nA代码如下所示：\n```java\ntask A::main_phase(uvm_phase phase);\n   my_transaction tr;\n   my_transaction rsp;\n   repeat(10) begin\n      #10;\n      tr = new(\"tr\");\n      assert(tr.randomize());\n      A_transport.transport(tr, rsp);\n      `uvm_info(\"A\", \"received rsp\", UVM_MEDIUM)\n      rsp.print();\n   end\nendtask\n```\nB中需要定义一个类型为uvm_blocking_transport_imp的IMP：\n```java\nclass B extends uvm_component;\n   `uvm_component_utils(B)\n\n   uvm_blocking_transport_imp#(my_transaction, my_transaction, B) B_imp;\n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n   endfunction\n\n   extern function void build_phase(uvm_phase phase);\n   extern task transport(my_transaction req, output my_transaction rsp);\nendclass\n\nfunction void B::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   B_imp = new(\"B_imp\", this);\nendfunction\n\ntask B::transport(my_transaction req, output my_transaction rsp);\n   `uvm_info(\"B\", \"receive a transaction\", UVM_LOW) \n   req.print();\n   //do something according to req\n   #5;\n   rsp = new(\"rsp\");\nendtask\n```\nenv中的代码是：\n```java\nfunction void my_env::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\n   A_inst.A_transport.connect(B_inst.B_imp);\nendfunction\n```\n在A中调用transport任务，并把生成的transaction作为第一个参数。B中的transaport任务接收到这笔transaction，根据这笔transaction做某些操作，并把操作的结果作为transport的第二个参数发送出去。A根据接收到的rsp来决定后面的行为。\n# 五、nonblocking端口\n```java\ntask A::main_phase(uvm_phase phase);\n   my_transaction tr;\n   repeat(10) begin\n      tr = new(\"tr\");\n      assert(tr.randomize());\n      while(!A_port.can_put()) #10;\n      void'(A_port.try_put(tr));\n   end\nendtask\n```\n由于端口变为了非阻塞的，所以在送出transaction之前需要调用can_put函数来确认是否能够执行put操作。can_put最终会调用B中的can_put:\n\n# 六、analysis端口\nUVM中还有两种特殊的端口：analysis_port和analysis_export。该端口有两点需要注意的地方：\n- 一个analysis_port(analysis_export)可以连接多个IMP，analysis_port(analysis_export)与IMP  之间的通信是一对多的通信。analysis_port(analysis_export)更像是一个广播。\n- put与get系列端口都有阻塞和非阻塞的区分。但是对于analysis_port和analysis_export来说,没有阻塞和非阻塞的概念。\n\n一个analysis_port可以和多个IMP相连接进行通信，但是IMP的类型必须是uvm_analysis_imp,否则会报错。\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/cfeed375eb6d4d189425c5d4cbbf34a5.png\" height=250 >\n</div>\n\n下面是A的代码：\n```java\nclass A extends uvm_component;\n   `uvm_component_utils(A)\n\n   uvm_analysis_port#(my_transaction) A_ap;\n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n   endfunction\n\n   extern function void build_phase(uvm_phase phase);\n   extern virtual  task main_phase(uvm_phase phase);\nendclass\n\nfunction void A::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   A_ap = new(\"A_ap\", this);\nendfunction\n\ntask A::main_phase(uvm_phase phase);\n   my_transaction tr;\n   repeat(10) begin\n      #10;\n      tr = new(\"tr\");\n      assert(tr.randomize());\n      A_ap.write(tr);\n   end\nendtask\n```\nA的代码很简单，只是简单地定义一个analysis_port，并在main_phase中每隔10个时间单位写入一个transaction。\nB的代码为：\n```java\nfunction void B::write(my_transaction tr);\n   `uvm_info(\"B\", \"receive a transaction\", UVM_LOW) \n   tr.print();\nendfunction\n```\n在env中通过下面方式进行连接：\n```java\nfunction void my_env::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\n   A_inst.A_ap.connect(B_inst.B_imp);\n   A_inst.A_ap.connect(C_inst.C_imp);\nendfunction\n```\n上面只是一个analysis_port与IMP相连的例子。analysis_export和IMP也可以这样相连接,只需将上面例子中的uvm_analysis_port改为uvm_analysis_export就可以。\n\n# 七、monitor与scoreboard之间的通信\n和上一个一样，在两段分别进行定义，monitor的代码为：\n```java\ntask my_monitor::main_phase(uvm_phase phase);\n   my_transaction tr;\n   while(1) begin\n      tr = new(\"tr\");\n      collect_one_pkt(tr);\n      ap.write(tr);\n   end\nendtask\n```\nscoreboard的代码为：\n```java\nfunction void my_scoreboard::write_monitor(my_transaction tr);\n   my_transaction  tmp_tran;\n   bit result;\n   if(expect_queue.size() > 0) begin\n      tmp_tran = expect_queue.pop_front();\n      result = tr.compare(tmp_tran);\n      if(result) begin \n         `uvm_info(\"my_scoreboard\", \"Compare SUCCESSFULLY\", UVM_LOW);\n      end\n      else begin\n         `uvm_error(\"my_scoreboard\", \"Compare FAILED\");\n         $display(\"the expect pkt is\");\n         tmp_tran.print();\n         $display(\"the actual pkt is\");\n         tr.print();\n      end\n   end\n   else begin\n      `uvm_error(\"my_scoreboard\", \"Received from DUT, while Expect Queue is empty\");\n      $display(\"the unexpected pkt is\");\n      tr.print();\n   end\nendfunction\n```\n之后在env中可以使用connect连接。\n由于monitor与scoreboard在UVM树中并不是平等的兄妹关系，这里选择下面的连接方式：\n在agent中声明一个ap,但是不实例化它,让其指向monitor中的ap。在env中可以直接连接agent的ap到scoreboard的imp：\n```java\nagent:\nclass my_agent extends uvm_agent ; \n\tuvm_analysis_port #(my_transaction) ap; \n\t...  \n\tfunction void my_agent::connect_phase(uvm_phase phase); \n\t\tap = mon.ap; \n\t\t...  \n\tendfunction \nendclass \nenv:\nfunction void my_env::connect_phase(uvm_phase phase); \n\to_agt.ap.connect(scb.scb_imp); \n\t\t...  \nendfunction\n```\n在上面的例子中，scoreboard只接收一路数据。但在现实情况中，scoreboard除了接收monitor的数据之外，还要接收reference model的数据。相应的scoreboard就要再添加一个  uvm_analysis_imp的IMP。此时问题就出现了，由于接收到的两路数据应该做不同的处理，所以这个新的IMP也要有一个write任务与其对应。但是write只有一个，怎么办?\n可以使用宏定义的方法：\n```java\n`uvm_analysis_imp_decl(_monitor)\n`uvm_analysis_imp_decl(_model)\nclass my_scoreboard extends uvm_scoreboard;\n   \tmy_transaction  expect_queue[$];\n\tuvm_analysis_imp_monitor#(my_transaction, my_scoreboard) monitor_imp; \n\tuvm_analysis_imp_model#(my_transaction, my_scoreboard) model_imp;\n   `uvm_component_utils(my_scoreboard)\n\n   extern function new(string name, uvm_component parent = null);\n   extern virtual function void build_phase(uvm_phase phase);\n   extern virtual task main_phase(uvm_phase phase);\nendclass \n```\n上述代码通过宏uvm_analysis_imp_decl声明了两个后缀_monitor和_model。\n当与monitor_imp相连接的analysis_port执行write函数时,会自动调用write_monitor函数,而与model_imp相连接的analysis_port执行write  函数时,会自动调用write_model函数。\n\n# 八、使用FIFO通信\n使用fifo的方法能够让两个端口都能实现主动的接收，因此下面的例子便是利用FIFO来实现monitor和scoreboard的通信。\nFIFO的本质是一块缓存加两个IMP。在monitor与FIFO的连接关系中，monitor中依然是analysis_port，FIFO中是uvm_analysis_imp，数据流和控制流的方向相同。在scoreboard与FIFO的连接关系中，scoreboard中使用blocking_get_port端口：\n```\nclass my_scoreboard extends uvm_scoreboard;\n   my_transaction  expect_queue[$];\n   uvm_blocking_get_port #(my_transaction)  exp_port[16];\n   uvm_blocking_get_port #(my_transaction)  act_port;\n   `uvm_component_utils(my_scoreboard)\n\n   extern function new(string name, uvm_component parent = null);\n   extern virtual function void build_phase(uvm_phase phase);\n   extern virtual task main_phase(uvm_phase phase);\nendclass \n```\n而FIFO中使用的是一个get端口的IMP。在这种连接关系中，控制流是从scoreboard到FIFO，而数据流是从FIFO到scoreboard。\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/597c97f211e7411cad212a6b0083aa55.png\" height=300 >\n</div>\n\n在env中连接方式如下：\n```\nfunction void my_env::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\n   i_agt.ap.connect(agt_mdl_fifo.analysis_export);\n   mdl.port.connect(agt_mdl_fifo.blocking_get_export);\n   for(int i = 0; i < 16; i++) begin\n      mdl.ap[i].connect(mdl_scb_fifo[i].analysis_export);\n      scb.exp_port[i].connect(mdl_scb_fifo[i].blocking_get_export);\n   end\n   o_agt.ap.connect(agt_scb_fifo.analysis_export);\n   scb.act_port.connect(agt_scb_fifo.blocking_get_export); \nendfunction\n```\nFIFO中有两个IMP，但是在上面的连接关系中，FIFO中却是EXPORT，这是为什么呢？实际上，FIFO中的analysis_export和blocking_get_export虽然名字中有关键字export，但是其类型却是IMP。UVM为了掩饰IMP的存在，在它们的命名中加入了export关键字。\n但事实上，FIFO上的端口并不局限于上述两个，一个FIFO中有众多的端口。端口列表如下：\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/695c20087ecb4cd998290857b6774ac3.png\" height=300 >\n</div>\n\n# 总结\n总结来说，这一章主要讲了数据在UVM中的传递方式，学习这一章可以更好的编写灵活性更高的UVM代码。\n","tags":["UVM"],"categories":["UVM学习笔记"]},{"title":"【UVM学习笔记】UVM基础—一文告诉你UVM的组成部分","url":"/2025/04/16/675312ec1441/","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n---\n\n# 一、Driver驱动器\n这段代码是用 SystemVerilog 编写的一个基于 UVM（Universal Verification Methodology）的驱动器（driver）组件，名为 my_driver。它继承自 uvm_driver 类，用于在验证环境中驱动 DUT（Design Under Test，被测设计）的输入信号。下面我将逐步解释这段代码的结构和功能。\n\n## 1.1 整体结构\n代码分为两个主要部分：\n- 类定义部分：定义了 my_driver 类，包括构造函数和一个外部声明的任务（main_phase）。\n- 任务实现部分：实现了 main_phase 任务，负责具体的信号驱动逻辑。\n\n此外，代码使用 ifndef 和 define 宏来防止重复包含。\n\n## 1.2 详细解释\n### 1.2.1 宏定义保护\n```java\nifndef MY_DRIVER__SV\ndefine MY_DRIVER__SV\n```\n检查是否已经定义了宏MY_DRIVER__SV。如果没有定义，则编译器会继续处理后面的代码。\n最后，文件末尾的 endif 与开头的 ifndef 配对，结束条件编译块。\n\n### 1.2.2 类定义\n```java\nclass my_driver extends uvm_driver;\n   function new(string name = \"my_driver\", uvm_component parent = null);\n      super.new(name, parent);\n   endfunction\n   extern virtual task main_phase(uvm_phase phase);\nendclass\n```\nclass my_driver extends uvm_driver：定义一个名为 my_driver 的类，并且表示 my_driver 继承自 UVM 提供的基类 uvm_driver。\nuvm_driver 是 UVM 框架中的一个标准组件类，用于将事务级数据转换为 DUT 的引脚级信号。\n>事务级数据是指更高层次的抽象数据，通常以结构体或类的形式表示，而不是直接的硬件信号（0 和 1）。它描述的是“做什么”，而不是“怎么做”。\n>假设事务是一个 8 位数据 8'b10100101。\n驱动器将其转换为：\ntop_tb.rxd <= 8'b10100101;（数据信号）\ntop_tb.rx_dv <= 1'b1;（有效信号）\n并在 @(posedge top_tb.clk) 时更新这些信号。\n\n\n`function new`：定义类的构造函数，用于创建 my_driver 对象。\n`super.new(name, parent)`：调用父类 uvm_driver 的构造函数，将 name 和 parent 参数传递给它。这是 UVM 中面向对象编程的标准做法，确保父类的初始化逻辑被执行。\n`extern`：表示 main_phase 任务的实现不在类定义内部，而是在外部单独定义。\n`virtual`：声明这是一个虚任务，允许子类重写（override）它。这是 UVM 中 phase 方法的常见做法。\n`task main_phase(uvm_phase phase)`：定义一个名为 main_phase 的任务，接收一个 uvm_phase 类型的参数 phase，表示 UVM 的仿真阶段（这里是 main_phase，通常用于主要的测试执行阶段）。\n\n### 1.2.3 任务实现\n```java\ntask my_driver::main_phase(uvm_phase phase);\n   top_tb.rxd <= 8'b0;\n   top_tb.rx_dv <= 1'b0;\n   while(!top_tb.rst_n)\n      @(posedge top_tb.clk);\n   for(int i = 0; i < 256; i++)begin\n      @(posedge top_tb.clk);\n      top_tb.rxd <= $urandom_range(0, 255);\n      top_tb.rx_dv <= 1'b1;\n      `uvm_info(\"my_driver\", \"data is drived\", UVM_LOW)\n   end\n   @(posedge top_tb.clk);\n   top_tb.rx_dv <= 1'b0;\nendtask\n```\n`my_driver::main_phase`：明确指定这个任务是 my_driver 类的一部分。\n这是 main_phase 的具体实现，负责驱动 DUT 的信号。\nuvm_info(\"my_driver\", \"data is drived\", UVM_LOW)：\nUVM 提供的日志记录宏，打印信息。\n`my_driver`：消息来源（组件名）。\n`data is drived`：消息内容。\n`UVM_LOW`：日志级别，表示低详细程度。\n作用：在 256 个时钟周期内，连续向 DUT 的 rxd 输入随机数据，并将 rx_dv 置为 1，同时记录日志。\n\n> 所谓类的定义,就是用编辑器写下：\n> ```java\n>class A\n>...\n>endclass\n>```\n>而所谓类的实例化指的是通过new创造出A的一个实例:\n>```java\n>A a_list;\n>a_list = new();\n>```\n\n\n### 1.2.4 factory机制\nfactory机制的实现被集成在了一个宏中：uvm_component_utils。这个宏所做的事情非常多，其中之一就是将my_driver登记在UVM内部的一张表中，这张表是 factory 功能实现的基础。只要在定义一个新的类时使用这个宏，就相当于把这个类注册到了这张表中。\n```java\n`uvm_component_utils(my_driver)\n```\n在给driver中加入factory机制后，还需要对top_tb做一些改动：\n```java\ninitial begin\n\trun_test(\"my_driver\");\nend\n```\n但是输出的结果只有两个，没有执行后面的代码，关于这个问题，牵涉UVM的objection机制。\n```java\nUVM_INFO my_driver.sv(8) @ 0: uvm_test_top [my_driver] new is called\nUVM_INFO @ 0: reporter [RNTST] Running test my_driver...\nUVM_INFO my_driver.sv(14) @ 0: uvm_test_top [my_driver] main_phase is called\n```\n### 1.2.4 objection机制\nUVM中通过objection机制来控制验证平台的关闭。细心的读者可能发现，在上节的例子中，并没有如2.2.1节所示显式地调用 finish 语句来结束仿真。但是在运行上节例子时，仿真平台确实关闭了。在每个phase中，UVM会检查是否有objection被提起  (raise_objection)，如果有，那么等待这个objection被撤销(drop_objection)后停止仿真；如果没有，则马上结束当前 phase。\n```java\ntask my_driver::main_phase(uvm_phase phase);\n   phase.raise_objection(this);\n\t...\n   phase.drop_objection(this);\nendtask\n```\nraise_objection语句必须在main_phase中第一个消耗仿真时间的语句之前。\t\n### 1.2.5 加入virtual interface\n\n使用该方法能够杜绝因为绝对路径所带来的不便，在SystemVerilog中使用interface来连接验证平台与DUT的端口，该端口可以认为是一种总线。\n定义interface的方法如下：\n```java\n`ifndef MY_IF__SV\n`define MY_IF__SV\n\ninterface my_if(input clk, input rst_n);\n   logic [7:0] data;\n   logic valid;\nendinterface\n\n`endif\n```\n因为my_driver是一个类，在类中不能使用声明的方法定义一个  interface，只有在类似top_tb这样的模块(module)中才可以。在类中使用的是virtual interface：\n```java\nvirtual my_if vif;\n```\n因此在 中就可以使用该方法来使用：\n```java\ntask my_driver::main_phase(uvm_phase phase);\n   phase.raise_objection(this);\n   `uvm_info(\"my_driver\", \"main_phase is called\", UVM_LOW);\n   vif.data <= 8'b0; \n   vif.valid <= 1'b0;\n   while(!vif.rst_n)\n      @(posedge vif.clk);\n   for(int i = 0; i < 256; i++)begin\n      @(posedge vif.clk);\n      vif.data <= $urandom_range(0, 255);\n      vif.valid <= 1'b1;\n      `uvm_info(\"my_driver\", \"data is drived\", UVM_LOW);\n   end\n   @(posedge vif.clk);\n   vif.valid <= 1'b0;\n   phase.drop_objection(this);\nendtask\n```\n下面的问题是，如何把top_tb中的input_if和my_driver中的vif对应起来。\n针对该问题，UVM引进了config_db机制。在config_db机制中，分为set和get两步操作。set就是读取数据，get就是输出数据。在top_tb中的代码如下所示：\n```java\ninitial begin\n   uvm_config_db#(virtual my_if)::set(null, \"uvm_test_top\", \"vif\", input_if);\nend\n```\n在my_driver中的代码如下所示：\n```java\n   virtual function void build_phase(uvm_phase phase);\n      super.build_phase(phase);\n      `uvm_info(\"my_driver\", \"build_phase is called\", UVM_LOW);\n      if(!uvm_config_db#(virtual my_if)::get(this, \"\", \"vif\", vif))\n         `uvm_fatal(\"my_driver\", \"virtual interface must be set for vif!!!\")\n   endfunction\n```\n首先build_phase也是内置函数，build_phase在new函数之后main_phase之前执行。其中的super.build_phase语句是因为在其父类的build_phase中执行了一些必要的操作。\n其中还出现了uvm_fatal宏，其与uvm_info的作用类似。uvm_fatal的出现表示验证平台出现了重大问题而无法继续下去,必须停止仿真并做相应的检查。\nconfig_db的set和get函数都有四个参数，这两个函数的第三个参数必须完全一致。\n- set函数的第四个参数表示要将哪个interface通过config_db传递给my_driver\n- get函数的第四个参数表示把得到的interface传递给哪个my_driver的成员变量。\n\nset函数的第二个参数表示的是路径索引，UVM通过run_test语句创建一个名字为uvm_test_top的实例，因此需要输入uvm_test_top。无论传递给run_test的参数是什么,创建的实例的名字都为uvm_test_top。其他两个参数以后再说。\nset函数与get函数使用双冒号是因为这两个函数都是静态函数，而前面的#键是要传递的类型,这里是virtual my_if。\n# 二、transaction组件\ntransaction就是一个提供数据传输的打包操作。在不同的验证平台中,会有不同的transaction。一个简单的transaction的定义如下:\n```java\n`ifndef MY_TRANSACTION__SV\n`define MY_TRANSACTION__SV\n\nclass my_transaction extends uvm_sequence_item;\n\n   rand bit[47:0] dmac;\n   rand bit[47:0] smac;\n   rand bit[15:0] ether_type;\n   rand byte      pload[];\n   rand bit[31:0] crc;\n\n   constraint pload_cons{\n      pload.size >= 46;\n      pload.size <= 1500;\n   }\n\n   function bit[31:0] calc_crc();\n      return 32'h0;\n   endfunction\n\n   function void post_randomize();\n      crc = calc_crc;\n   endfunction\n\n   `uvm_object_utils(my_transaction)\n\n   function new(string name = \"my_transaction\");\n      super.new();\n   endfunction\nendclass\n`endif\n```\n其中dmac和smac模拟的就是发送地址和接受地址，ether_type是以太网类型，pload是其携带数据的大小。下面的函数是用于约束上述数据的。通过pload_cons约束将其大小被限制在46~1500byte，CRC暂且使用post_randomize中加的一个空函数calc_crc来对其定义，有兴趣的读者可以将其补充完整。\n>post_randomize是SystemVerilog中提供的一个函数，当某个类的实例的randomize函数被调用后,post_randomize会紧随其后无条件地被调用。\n\n在transaction定义中，有两点值得引起注意：\n1. my_transaction的基类是uvm_sequence_item。\n在UVM中,所有的transaction都要从uvm_sequence_item派生\n2. 是这里没有使用uvm_component_utils宏来实现factory机制，而是使用了uvm_object_utils。\n\n下面便是使用transaction的my_driver代码：\n```java\ntask my_driver::main_phase(uvm_phase phase);\n   my_transaction tr;\n   phase.raise_objection(this);\n   vif.data <= 8'b0;\n   vif.valid <= 1'b0;\n   while(!vif.rst_n)\n      @(posedge vif.clk);\n   for(int i = 0; i < 2; i++) begin \n      tr = new(\"tr\");\n      assert(tr.randomize() with {pload.size == 200;});\n      drive_one_pkt(tr);\n   end\n   repeat(5) @(posedge vif.clk);\n   phase.drop_objection(this);\nendtask\n\ntask my_driver::drive_one_pkt(my_transaction tr);\n   bit [47:0] tmp_data;\n   bit [7:0] data_q[$]; \n  \n   //push dmac to data_q\n   tmp_data = tr.dmac;\n   for(int i = 0; i < 6; i++) begin\n      data_q.push_back(tmp_data[7:0]);\n      tmp_data = (tmp_data >> 8);\n   end\n   //push smac to data_q\n   //push ether_type to data_q\n   //push payload to data_q\n   //push crc to data_q\n\n   `uvm_info(\"my_driver\", \"begin to drive one pkt\", UVM_LOW);\n   repeat(3) @(posedge vif.clk);\n\n   while(data_q.size() > 0) begin\n      @(posedge vif.clk);\n      vif.valid <= 1'b1;\n      vif.data <= data_q.pop_front(); \n   end\n\n   @(posedge vif.clk);\n   vif.valid <= 1'b0;\n   `uvm_info(\"my_driver\", \"end drive one pkt\", UVM_LOW);\nendtask\n```\n在main_phase中，先使用randomize将tr随机化，之后通过drive_one_pkt任务将tr的内容驱动到DUT的端口上。\n在drive_one_pkt中，先将tr中所有的数据压入队列data_q中，之后再将data_q中所有的数据弹出输入到DUT端口上。\n# 三、env组件\n为了能够更好的实例化my_dirver等组件，需要有一个容器去把他们装在一起，这个容器就是env，代码如下：\n```java\n`ifndef MY_ENV__SV\n`define MY_ENV__SV\n\nclass my_env extends uvm_env;\n\n   my_driver drv;\n\n   function new(string name = \"my_env\", uvm_component parent);\n      super.new(name, parent);\n   endfunction\n\n   virtual function void build_phase(uvm_phase phase);\n      super.build_phase(phase);\n      drv = my_driver::type_id::create(\"drv\", this); \n   endfunction\n\n   `uvm_component_utils(my_env)\nendclass\n`endif\n```\n在my_env的定义中，使用了区别于new的方式，只有使用这种方式实例化的实例，验证平台中的组件在实例化时都应该使用type_name::type_id::create的方式。\n回顾一下my_driver的new函数：\n```java\nfunction new(string name = \"my_driver\", uvm_component parent = null); \n\tsuper.new(name, parent); \nendfuncti\n```\n可以看出 my_driver 的父结点就是my_env。通过parent的形式，UVM建立起了树形的组织结构。在这种树形的组织结构中，由run_test创建的实例是树根，并且树根的名字是固定的为uvm_test_top，长出枝叶的过程需要在my_env的build_phase中手动实现。\n无论是树根还是树叶，都必须由 uvm_component 或者其派生类继承而来。整棵UVM树的结构如图所示。\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/2e7b6a7f3cf44aebacd2edf67b18d061.png\" height=250>\n</div>\n在UVM的树形结构中，build_phase的执行遵照从树根到树叶的顺序。\n在top_tb中使用config_db机制传递virtual  my_if时，要改变相应的路径；同时，run_test的参数也从my_driver变为了my_env。\n```java\ninitial begin\n   run_test(\"my_env\");\nend\n\ninitial begin\n   uvm_config_db#(virtual my_if)::set(null, \"uvm_test_top.drv\", \"vif\", input_if);\nend\n```\nset函数的第二个参数从uvm_test_top变为了uvm_test_top.drv，其中uvm_test_top是UVM自动创建的树根的名字，而drv则是在my_env的build_phase中实例化drv时传递过去的名字。\n# 四、monitor组件\n验证平台中实现监测DUT行为的组件是monitor，其主要功能起到一个监测作用。其将用于收集DUT的端口数据，并将其转换成transaction交给后续的组件处理。代码如下：\n```java\n`ifndef MY_MONITOR__SV\n`define MY_MONITOR__SV\nclass my_monitor extends uvm_monitor;\n   virtual my_if vif;\n   `uvm_component_utils(my_monitor)\n   function new(string name = \"my_monitor\", uvm_component parent = null);\n      super.new(name, parent);\n   endfunction\n   virtual function void build_phase(uvm_phase phase);\n      super.build_phase(phase);\n      if(!uvm_config_db#(virtual my_if)::get(this, \"\", \"vif\", vif))\n         `uvm_fatal(\"my_monitor\", \"virtual interface must be set for vif!!!\")\n   endfunction\n   extern task main_phase(uvm_phase phase);\n   extern task collect_one_pkt(my_transaction tr);\nendclass\ntask my_monitor::main_phase(uvm_phase phase);\n   my_transaction tr;\n   while(1) begin\n      tr = new(\"tr\");\n      collect_one_pkt(tr);\n   end\nendtask\ntask my_monitor::collect_one_pkt(my_transaction tr);\n   bit[7:0] data_q[$]; \n   int psize;\n   while(1) begin\n      @(posedge vif.clk);\n      if(vif.valid) break;\n   end\n   `uvm_info(\"my_monitor\", \"begin to collect one pkt\", UVM_LOW);\n   while(vif.valid) begin\n      data_q.push_back(vif.data);\n      @(posedge vif.clk);\n   end\n   //pop dmac\n   //pop smac\n   //pop ether_type\n   //pop payload\n   //pop crc\n   `uvm_info(\"my_monitor\", \"end collect one pkt, print it:\", UVM_LOW);\n    tr.my_print();\nendtask\n`endif\n```\n该代码与my_driver非常相似。其主要工作与my_driver相反，my_driver用于产生驱动信号，而该模块则用于收集。\n最后要在evn中进行实例化：\n```java\n   virtual function void build_phase(uvm_phase phase);\n      super.build_phase(phase);\n      drv = my_driver::type_id::create(\"drv\", this); \n      i_mon = my_monitor::type_id::create(\"i_mon\", this);\n      o_mon = my_monitor::type_id::create(\"o_mon\", this);\n   endfunction\n```\n需要注意的是这里定义了两个my_monitor模块，一个收集输入的，另一个收集输出的。树形结构如下所示：\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/6a95bda1540841519687a48c87f6b982.png\" height=250 >\n</div>\n\n# 五、agent组件\n因为my_monitor和my_dirver有相似性，因此可以将两者封装在一起，使用agent组件，代码如下：\n```java\n`ifndef MY_AGENT__SV\n`define MY_AGENT__SV\n\nclass my_agent extends uvm_agent ;\n   my_driver     drv;\n   my_monitor    mon;\n   \n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n   endfunction \n   \n   extern virtual function void build_phase(uvm_phase phase);\n   extern virtual function void connect_phase(uvm_phase phase);\n\n   `uvm_component_utils(my_agent)\nendclass \n\nfunction void my_agent::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   if (is_active == UVM_ACTIVE) begin\n       drv = my_driver::type_id::create(\"drv\", this);\n   end\n   mon = my_monitor::type_id::create(\"mon\", this);\nendfunction \n\nfunction void my_agent::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\nendfunction\n`endif\n```\n> 这里有一点比较疑惑，为什么build_phase和connect_phase要在外面定义？为什么不在里面？\n\n里面的is_active相当于一个宏定义，用于判断是否实例化dirver，比如再输入的时候需要实例化去驱动，但是在输出就不需要。因此，env的代码就变成下面的样子：\n```java\n   virtual function void build_phase(uvm_phase phase);\n      super.build_phase(phase);\n      i_agt = my_agent::type_id::create(\"i_agt\", this);\n      o_agt = my_agent::type_id::create(\"o_agt\", this);\n      i_agt.is_active = UVM_ACTIVE;\n      o_agt.is_active = UVM_PASSIVE;\n   endfunction\n```\nUVM_ACTIVE和UVM_PASSIVE是两个枚举。UVM树形结构变成下面这样：\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/dca1a8311f1645eea8269ee8d46ad625.png\" height=250 >\n</div>\n\n# 五、reference model组件\nreference model用于完成和DUT相同的功能，用于与设计的验证平台在后面的计分板上做对比。改模块的代码如下所示：\n```java\n`ifndef MY_MODEL__SV\n`define MY_MODEL__SV\n\nclass my_model extends uvm_component;\n   \n   uvm_blocking_get_port #(my_transaction)  port;\n   uvm_analysis_port #(my_transaction)  ap;\n\n   extern function new(string name, uvm_component parent);\n   extern function void build_phase(uvm_phase phase);\n   extern virtual  task main_phase(uvm_phase phase);\n\n   `uvm_component_utils(my_model)\nendclass \n\nfunction my_model::new(string name, uvm_component parent);\n   super.new(name, parent);\nendfunction \n\nfunction void my_model::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   port = new(\"port\", this);\n   ap = new(\"ap\", this);\nendfunction\n\ntask my_model::main_phase(uvm_phase phase);\n   my_transaction tr;\n   my_transaction new_tr;\n   super.main_phase(phase);\n   while(1) begin\n      port.get(tr);\n      new_tr = new(\"new_tr\");\n      new_tr.my_copy(tr);\n      `uvm_info(\"my_model\", \"get one transaction, copy and print it:\", UVM_LOW)\n      new_tr.my_print();\n      ap.write(new_tr);\n   end\nendtask\n`endif\n```\n可以看出，其主要就是复制了一份tr从ap到port。\n但是其中的难点在于如何将 my_model 与其他模块进行通信。在UVM中,通常使用TLM(Transaction Level Modeling)实现component之间transaction级别  的通信。得到的UVM树形图如下所示：\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/34cc566007d74a9bab7dae60f0c05ca3.png\" height=250 >\n</div>\n\n这里需要注意数据流动的方向，是从i_agt流动到mdl，而数据是i_agt中的my_monitor。因此在 my_monitor 需要定义一下：\n```java\nuvm_analysis_port #(my_transaction)  ap;\n   virtual function void build_phase(uvm_phase phase);\n...\n      ap = new(\"ap\", this);\n   endfunction\n   \ntask my_monitor::main_phase(uvm_phase phase);\n   my_transaction tr;\n   while(1) begin\n      tr = new(\"tr\");\n      collect_one_pkt(tr);\n      ap.write(tr);\n   end\nendtask\n```\nuvm_analysis_port是一个参数化的类，其参数就是这个analysis_port需要传递的数据的类型,在本节中是my_transaction。到此,在my_monitor中需要为transaction通信准备的工作已经全部完成。\nUVM的transaction级别通信的数据接收方式也有多种,其中一种就是使用uvm_blocking_get_port。该接收端已经在 my_monitor 中定义好了。可以往前去看my_monitor的代码。\n在 my_monitor 和 my_model 中定义并实现了各自的端口之后，通信的功能并没有实现,还需要在 my_env 中使用 fifo 将两个端口联系在一起。下面是my_env 中的代码：\n```java\nclass my_env extends uvm_env;\n   uvm_tlm_analysis_fifo #(my_transaction) agt_mdl_fifo;\n...\n   virtual function void build_phase(uvm_phase phase);\n   ...\n      agt_mdl_fifo = new(\"agt_mdl_fifo\", this);\n   endfunction\n...\nendclass\n\nfunction void my_env::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\n   i_agt.ap.connect(agt_mdl_fifo.analysis_export);\n   mdl.port.connect(agt_mdl_fifo.blocking_get_export);\nendfunction\n\n`endif\n```java\nfifo的类型是uvm_tlm_analysis_fifo，其参数是存储在其中的transaction的类型。\n>这里引入了connect_phase。它的执行顺序并不是从树根到树叶,而是从树叶到树根——先执行driver和  monitor的connect_phase,再执行agent的connect_phase,最后执行env的connect_phase。\n\n但是该连接是与i_agt进行连接，怎么打通i_agt与my_monitor之间的通道呢？就是使用指针的方式。i_agt中的代码如下：\n```java\nuvm_analysis_port #(my_transaction)  ap;\nfunction void my_agent::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\n   ap = mon.ap;\nendfunction\n```\n在这个代码里面没有实例化，直接将mon中的ap传给i_agt中的ap，就是用指针的形式，在访问i_agt中的ap时等价于访问mon中的ap。\n# 六、scoreboard组件\n该模块的作用就是比较DUT以及镜像模块的输出数值。代码如下：\n```java\n`ifndef MY_SCOREBOARD__SV\n`define MY_SCOREBOARD__SV\nclass my_scoreboard extends uvm_scoreboard;\n   my_transaction  expect_queue[$];\n   uvm_blocking_get_port #(my_transaction)  exp_port;\n   uvm_blocking_get_port #(my_transaction)  act_port;\n   `uvm_component_utils(my_scoreboard)\n\n   extern function new(string name, uvm_component parent = null);\n   extern virtual function void build_phase(uvm_phase phase);\n   extern virtual task main_phase(uvm_phase phase);\nendclass \n\nfunction my_scoreboard::new(string name, uvm_component parent = null);\n   super.new(name, parent);\nendfunction \n\nfunction void my_scoreboard::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   exp_port = new(\"exp_port\", this);\n   act_port = new(\"act_port\", this);\nendfunction \n\ntask my_scoreboard::main_phase(uvm_phase phase);\n   my_transaction  get_expect,  get_actual, tmp_tran;\n   bit result;\n \n   super.main_phase(phase);\n   fork \n      while (1) begin\n         exp_port.get(get_expect);\n         expect_queue.push_back(get_expect);\n      end\n      while (1) begin\n         act_port.get(get_actual);\n         if(expect_queue.size() > 0) begin\n            tmp_tran = expect_queue.pop_front();\n            result = get_actual.my_compare(tmp_tran);\n            if(result) begin \n               `uvm_info(\"my_scoreboard\", \"Compare SUCCESSFULLY\", UVM_LOW);\n            end\n            else begin\n               `uvm_error(\"my_scoreboard\", \"Compare FAILED\");\n               $display(\"the expect pkt is\");\n               tmp_tran.my_print();\n               $display(\"the actual pkt is\");\n               get_actual.my_print();\n            end\n         end\n         else begin\n            `uvm_error(\"my_scoreboard\", \"Received from DUT, while Expect Queue is empty\");\n            $display(\"the unexpected pkt is\");\n            get_actual.my_print();\n         end \n      end\n   join\nendtask\n`endif\n```\nmy_scoreboard需要比较两种数据，前者通过exp_port获取，而后者通过  act_port获取。在main_phase中通过fork建立起了两个进程：\n- 一个进程处理exp_port的数据，当收到数据后，把数据放入expect_queue中。\n- 另外一个进程处理act_port的数据，这是DUT的输出数据，当收集到这些数据后，将参考数据从队列里面弹出，并调用my_transaction的my_compare函数。\n\n最终的UVM树形图如下所示：\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/2dfa4430c5194be0a118044882f3b675.png\" height=250 >\n</div>\n\nmy_transaction的my_compare函数很简单，代码如下所示：\n```java\n   function bit my_compare(my_transaction tr);\n      bit result;\n      \n      if(tr == null)\n         `uvm_fatal(\"my_transaction\", \"tr is null!!!!\")\n      result = ((dmac == tr.dmac) &&\n                (smac == tr.smac) &&\n                (ether_type == tr.ether_type) &&\n                (crc == tr.crc));\n      if(pload.size() != tr.pload.size())\n         result = 0;\n      else \n         for(int i = 0; i < pload.size(); i++) begin\n            if(pload[i] != tr.pload[i])\n               result = 0;\n         end\n      return result; \n   endfunction\n```\n还有两个端口与外界的连接，在书里表示不在过多赘述，这里我简单说一下：首先有两个连接，一个是o_agt的数据，还有一个是my_model中的镜像数据，两者的输入接口都使用`uvm_analysis_port #(my_transaction)  ap;`来定义。因此在本组件中`uvm_blocking_get_port`定义接受，连接代码如下：\n```java\n   uvm_tlm_analysis_fifo #(my_transaction) agt_scb_fifo;\n   uvm_tlm_analysis_fifo #(my_transaction) agt_mdl_fifo;\n   uvm_tlm_analysis_fifo #(my_transaction) mdl_scb_fifo;\n\nfunction void my_env::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\n   i_agt.ap.connect(agt_mdl_fifo.analysis_export);\n   mdl.port.connect(agt_mdl_fifo.blocking_get_export);\n   mdl.ap.connect(mdl_scb_fifo.analysis_export);\n   scb.exp_port.connect(mdl_scb_fifo.blocking_get_export);\n   o_agt.ap.connect(agt_scb_fifo.analysis_export);\n   scb.act_port.connect(agt_scb_fifo.blocking_get_export); \nendfunction\n```\n# 七、field_automation机制\n在my_transaction有三个函数，分别为my_print、my_copy以及my_compare函数。使用UVM中的field_automation机制可以将以上三个函数进行整合，该机制使用uvm_field系列宏实现：\n```java\n   `uvm_object_utils_begin(my_transaction)\n      `uvm_field_int(dmac, UVM_ALL_ON)\n      `uvm_field_int(smac, UVM_ALL_ON)\n      `uvm_field_int(ether_type, UVM_ALL_ON)\n      `uvm_field_array_int(pload, UVM_ALL_ON)\n      `uvm_field_int(crc, UVM_ALL_ON)\n   `uvm_object_utils_end\n```\n这里使用uvm_object_utils_begin和uvm_object_utils_end来实现my_transaction的factory注册，在这两个宏中间，使用uvm_field宏注册所有字段。通过这样的操作可以直接调用copy、compare、print等函数，而无需自己定义。\n引入field_automation机制的另外一大好处是简化driver和monitor。my_driver的drv_one_pkt任务和  my_monitor的collect_one_pkt任务代码很长，其作用主要是将数据通过tran连接到DUT上。使用field_automation机制后，drv_one_pkt任务可以简化为:\n```java\ntask my_driver::drive_one_pkt(my_transaction tr);\n   byte unsigned     data_q[];\n   int  data_size;\n   \n   data_size = tr.pack_bytes(data_q) / 8; \n   `uvm_info(\"my_driver\", \"begin to drive one pkt\", UVM_LOW);\n   repeat(3) @(posedge vif.clk);\n   for ( int i = 0; i < data_size; i++ ) begin\n      @(posedge vif.clk);\n      vif.valid <= 1'b1;\n      vif.data <= data_q[i]; \n   end\n\n   @(posedge vif.clk);\n   vif.valid <= 1'b0;\n   `uvm_info(\"my_driver\", \"end drive one pkt\", UVM_LOW);\nendtask\n```\n其中调用pack_bytes将tr中所有的字段变成byte流放入data_q中，减少了代码量。同理，在monitor中的解析也是这样：\n```java\ntask my_monitor::collect_one_pkt(my_transaction tr);\n   byte unsigned data_q[$];\n   byte unsigned data_array[];\n   logic [7:0] data;\n   logic valid = 0;\n   int data_size;\n   \n   while(1) begin\n      @(posedge vif.clk);\n      if(vif.valid) break;\n   end\n   \n   `uvm_info(\"my_monitor\", \"begin to collect one pkt\", UVM_LOW);\n   while(vif.valid) begin\n      data_q.push_back(vif.data);\n      @(posedge vif.clk);\n   end\n   data_size  = data_q.size();   \n   data_array = new[data_size];\n   for ( int i = 0; i < data_size; i++ ) begin\n      data_array[i] = data_q[i]; \n   end\n   tr.pload = new[data_size - 18]; //da sa, e_type, crc\n   data_size = tr.unpack_bytes(data_array) / 8; \n   `uvm_info(\"my_monitor\", \"end collect one pkt\", UVM_LOW);\nendtask\n```\n这里使用unpack_bytes函数将data_q中的byte流转换成tr中的各个字段。但是这里值得注意的是，unpack_bytes函数的输入参数必须是一个动态数组，所以需要先把收集到的数据放在data_q中的数据复制到一个动态数组中。==由于tr中的pload是一个动态数组,所以需要在调用 unpack_bytes 之前指定其大小,这样unpack_bytes函数才能正常工作（这里看不太懂）==。\n# 七、sequence组件\nsequence实际上就是一个产生激励的工具，在之前激励都是由my_dirver产生的，这次变为了sequence。在  一个规范化的UVM验证平台中,driver只负责驱动transaction,而不负责产生transaction。sequence机制有两大组成部分,一是  sequence,二是sequencer。\n## 7.1 sequencer\n下面是sequencer的代码部分：\n```java\nclass my_sequencer extends uvm_sequencer #(my_transaction);\n   \n   function new(string name, uvm_component parent);\n      super.new(name, parent);\n   endfunction \n   \n   `uvm_component_utils(my_sequencer)\nendclass\n```\n可以看到，uvm_sequencer是一个参数化的类,其参数是my_transaction，即此sequencer产生的transaction的类型。但是，我们上文中的dirver其实也是参数化的类，应该在定义driver时指明此driver要驱动的transaction的类型:\n```java\nclass my_driver extends uvm_driver#(my_transaction);\n```\n这样定义的好处是可以直接使用uvm_driver中的某些预先定义好的成员变量，如uvm_driver中有成员变量req，它的类型就是传递给uvm_driver的参数，在这里就是my_transaction，可以直接使用req：\n```java\ntask my_driver::main_phase(uvm_phase phase);\n   phase.raise_objection(this);\n   vif.data <= 8'b0;\n   vif.valid <= 1'b0;\n   while(!vif.rst_n)\n      @(posedge vif.clk);\n   for(int i = 0; i < 2; i++) begin \n      req = new(\"req\");\n      assert(req.randomize() with {pload.size == 200;});\n      drive_one_pkt(req);\n   end\n   repeat(5) @(posedge vif.clk);\n   phase.drop_objection(this);\nendtask\n```\n然后将该模块加入agent，得到的图如下所示：\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/2ab39f73831e4e808ae5b1078371900a.png\" height=250 >\n</div>\n\n## 7.2 sequence机制\n下面是前面提到的整个UVM的结构图，可以看见sequence的位置在比较偏的地方。这说明sequence并不是一个company而是一个object。\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/1c725a18ebd84ac3990ca2f08ca1050d.png\" height=250 >\n</div>\n\n其代码如下：\n```java\nclass my_sequence extends uvm_sequence #(my_transaction);\n   my_transaction m_trans;\n   function new(string name= \"my_sequence\");\n      super.new(name);\n   endfunction\n   virtual task body();\n      repeat (10) begin\n         `uvm_do(m_trans)\n      end\n      #1000;\n   endtask\n   `uvm_object_utils(my_sequence)\nendclass\n```\n可以看出，该模块在定义时同样要指定产生的transaction的类型，这里是my_transaction。每一个sequence都有一个body任务，当一个sequence启动之后，会自动执行body中的代码。\n在上面的例子中，用到了uvm_do，其作用为：\n- 创建一个my_transaction的实例m_trans\n- 将其随机化\n- 最终将其送给sequencer\n\n下一步就是要将uvm_driver和uvm_sequencer以及uvm_sequencer和uvm_sequencer连接起来。\n在uvm_driver中有成员变量seq_item_port，而在uvm_sequencer中有成员变量seq_item_export，这两者之间可以建立一个“通道”，通道中传递的transaction类型就是定义my_sequencer和my_driver时指定的transaction类型。因此在my_agent中,  使用connect函数把两者联系在一起：\n```java\nfunction void my_agent::connect_phase(uvm_phase phase);\n   super.connect_phase(phase);\n   if (is_active == UVM_ACTIVE) begin\n      drv.seq_item_port.connect(sqr.seq_item_export);\n   end\n   ap = mon.ap;\nendfunction\n```\n链接之后，dirver就可以向sequencer申请。代码如下：\n```java\ntask my_driver::main_phase(uvm_phase phase);\n   vif.data <= 8'b0;\n   vif.valid <= 1'b0;\n   while(!vif.rst_n)\n      @(posedge vif.clk);\n   while(1) begin\n      seq_item_port.get_next_item(req);\n      drive_one_pkt(req);\n      seq_item_port.item_done();\n   end\nendtask\n```\n在如上的代码中，通过get_next_item任务来得到一个新的req,并且驱动它,驱动完成后调用item_done通知sequencer。这里为什么会有一个item_done呢，其主要作用就是让sequencer知道dirver已经接收到了这个req，形成一个类似于握手的机制。\nuvm_do宏产生了一个transaction并交给sequencer，driver取走这个transaction后，uvm_do并不会立刻返回执行下一次的uvm_do宏，而是等待在那里，直到driver返回item_done信号。此时，uvm_do宏才算是执行完毕，返回后开始执行下一个uvm_do，并产生新的transaction。\n\n然后就是最后一个问题就是将uvm_sequencer和uvm_sequencer连接起来，可以直接在UVM的根部进行定义：\n```java\ntask my_env::main_phase(uvm_phase phase);\n   my_sequence seq;\n   phase.raise_objection(this);\n   seq = my_sequence::type_id::create(\"seq\");\n   seq.start(i_agt.sqr); \n   phase.drop_objection(this);\nendtask\n```\n首先创建一个my_sequence的实例seq，之后调用start任务。start任务的参数是一个sequencer指针。\n当然其实还有另一种方法来让dirver获得tran，就是使用try_next_item函数，上文中的get_next_item是阻塞的，而try_next_item则是非阻塞的，这样大大提高了代码的灵活性。\n```java\ntask my_driver::main_phase(uvm_phase phase);\n\t vif.data <= 8'b0; \n\t vif.valid <= 1'b0; \n\t while(!vif.rst_n) \n\t\t @(posedge vif.clk); \n \twhile(1)  begin \n \t\tseq_item_port.try_next_item(req);\n \t\t if(req == null) \n  \t\t\t@(posedge vif.clk); \n  \t\telse begin \n \t\t\t drive_one_pkt(req); \n \t\t seq_item_port.item_done();\n  \t end \n   end\nendtask\n```\n## 7.3 default_sequence机制\n在刚才，sequence是在my_env的main_phase中手工启动的，但是在实际应用中,  使用最多的还是通过default_sequence的方式启动sequence。default_sequence的启动方式很简单，只需要在任意地方加入如下代码（以my_env举例）：\n```java\n      uvm_config_db#(uvm_object_wrapper)::set(this,\n                                              \"i_agt.sqr.main_phase\",\n                                              \"default_sequence\",\n                                               my_sequence::type_id::get());\n```\n该代码同样使用了uvm_config_db，但是这里是在类里面调用的，第二个参数是相对于第一个参数的相对路径，由于上述代码是在my_env中，所以第二个参数中就不需  要uvm_test_top了。在top_tb中设置virtual interface时,由于top_tb不是一个类，无法使用this指针，所以设置set的第一个参数为null，并且第二个参数使用绝对路径uvm_test_top.xxx。\n在第二个路径参数中，出现了main_phase。这是因为该代码是在这个位置的main_phase启动的。\n至于set的第三个和第四个参数，书上说记住就行。\n还有一个问题就是，在上一节启动sequence前后，分别提起和撤销objection,这里也需要加上这两个操作。sequencer在启动default_sequence时，会自动将自己传给sequence的starting_phase，因此可以这样写：\n```java\n   virtual task body();\n      if(starting_phase != null) \n         starting_phase.raise_objection(this);\n      repeat (10) begin\n         `uvm_do(m_trans)\n      end\n      #1000;\n      if(starting_phase != null) \n         starting_phase.drop_objection(this);\n   endtask\n```\nok，结束。\n# 八、bast_test组件\n没想到吧，其实uvm的树根不是env，而是这个东西。该模块的代码如下：\n```java\nclass base_test extends uvm_test;\n\n   my_env         env;\n   \n   function new(string name = \"base_test\", uvm_component parent = null);\n      super.new(name,parent);\n   endfunction\n   \n   extern virtual function void build_phase(uvm_phase phase);\n   extern virtual function void report_phase(uvm_phase phase);\n   `uvm_component_utils(base_test)\nendclass\n\n\nfunction void base_test::build_phase(uvm_phase phase);\n   super.build_phase(phase);\n   env  =  my_env::type_id::create(\"env\", this); \n   uvm_config_db#(uvm_object_wrapper)::set(this,\n                                           \"env.i_agt.sqr.main_phase\",\n                                           \"default_sequence\",\n                                            my_sequence::type_id::get());\nendfunction\n\nfunction void base_test::report_phase(uvm_phase phase);\n   uvm_report_server server;\n   int err_num;\n   super.report_phase(phase);\n\n   server = get_report_server();\n   err_num = server.get_severity_count(UVM_ERROR);\n\n   if (err_num != 0) begin\n      $display(\"TEST CASE FAILED\");\n   end\n   else begin\n      $display(\"TEST CASE PASSED\");\n   end\nendfunction\n```\n代码很常规，但需要注意的是，这里设置了default_sequence，其他地方就不需要再设置了。 \n上面的代码中出现了report_phase，在report_phase中根据UVM_ERROR的数量来打印不同的信息，其在main_phase结束之后执行。 \n除了上述操作外，还通常在base_test中做如下事情：\n- 设置整个验证平台的超时退出时间;\n- 通过config_db设置验证平台中某些参数的值。\n\n最终得到的树形结构如下所示：\n\n<div align=center>\n<img src=\"https://i-blog.csdnimg.cn/direct/3f0c6de493004bbd9af7eb0ae15fa890.png\" height=250 >\n</div>\n\n# 九、总结\n到现在为止，一个基本的UVM结构已经完全构建完毕了，后面我会继续为大家分享uvm的相关知识以及项目。谢谢大家支持！！！\n","tags":["UVM"],"categories":["UVM学习笔记"]}]